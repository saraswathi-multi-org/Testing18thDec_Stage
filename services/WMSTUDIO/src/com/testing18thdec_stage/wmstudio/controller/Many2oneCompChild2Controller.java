/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing18thdec_stage.wmstudio.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.math.BigDecimal;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testing18thdec_stage.wmstudio.Many2oneCompChild2;
import com.testing18thdec_stage.wmstudio.service.Many2oneCompChild2Service;


/**
 * Controller object for domain model class Many2oneCompChild2.
 * @see Many2oneCompChild2
 */
@RestController("WMSTUDIO.Many2oneCompChild2Controller")
@Api(value = "Many2oneCompChild2Controller", description = "Exposes APIs to work with Many2oneCompChild2 resource.")
@RequestMapping("/WMSTUDIO/Many2oneCompChild2")
public class Many2oneCompChild2Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Many2oneCompChild2Controller.class);

    @Autowired
	@Qualifier("WMSTUDIO.Many2oneCompChild2Service")
	private Many2oneCompChild2Service many2oneCompChild2Service;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new Many2oneCompChild2 instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Many2oneCompChild2 createMany2oneCompChild2(@RequestBody Many2oneCompChild2 many2oneCompChild2) {
		LOGGER.debug("Create Many2oneCompChild2 with information: {}" , many2oneCompChild2);

		many2oneCompChild2 = many2oneCompChild2Service.create(many2oneCompChild2);
		LOGGER.debug("Created Many2oneCompChild2 with information: {}" , many2oneCompChild2);

	    return many2oneCompChild2;
	}

    @ApiOperation(value = "Returns the Many2oneCompChild2 instance associated with the given id.")
    @RequestMapping(value = "/{pkId:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Many2oneCompChild2 getMany2oneCompChild2(@PathVariable("pkId") Integer pkId) {
        LOGGER.debug("Getting Many2oneCompChild2 with id: {}" , pkId);

        Many2oneCompChild2 foundMany2oneCompChild2 = many2oneCompChild2Service.getById(pkId);
        LOGGER.debug("Many2oneCompChild2 details with id: {}" , foundMany2oneCompChild2);

        return foundMany2oneCompChild2;
    }

    @ApiOperation(value = "Updates the Many2oneCompChild2 instance associated with the given id.")
    @RequestMapping(value = "/{pkId:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Many2oneCompChild2 editMany2oneCompChild2(@PathVariable("pkId") Integer pkId, @RequestBody Many2oneCompChild2 many2oneCompChild2) {
        LOGGER.debug("Editing Many2oneCompChild2 with id: {}" , many2oneCompChild2.getPkId());

        many2oneCompChild2.setPkId(pkId);
        many2oneCompChild2 = many2oneCompChild2Service.update(many2oneCompChild2);
        LOGGER.debug("Many2oneCompChild2 details with id: {}" , many2oneCompChild2);

        return many2oneCompChild2;
    }
    
    @ApiOperation(value = "Partially updates the Many2oneCompChild2 instance associated with the given id.")
    @RequestMapping(value = "/{pkId:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Many2oneCompChild2 patchMany2oneCompChild2(@PathVariable("pkId") Integer pkId, @RequestBody @MapTo(Many2oneCompChild2.class) Map<String, Object> many2oneCompChild2Patch) {
        LOGGER.debug("Partially updating Many2oneCompChild2 with id: {}" , pkId);

        Many2oneCompChild2 many2oneCompChild2 = many2oneCompChild2Service.partialUpdate(pkId, many2oneCompChild2Patch);
        LOGGER.debug("Many2oneCompChild2 details after partial update: {}" , many2oneCompChild2);

        return many2oneCompChild2;
    }

    @ApiOperation(value = "Deletes the Many2oneCompChild2 instance associated with the given id.")
    @RequestMapping(value = "/{pkId:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteMany2oneCompChild2(@PathVariable("pkId") Integer pkId) {
        LOGGER.debug("Deleting Many2oneCompChild2 with id: {}" , pkId);

        Many2oneCompChild2 deletedMany2oneCompChild2 = many2oneCompChild2Service.delete(pkId);

        return deletedMany2oneCompChild2 != null;
    }

    @RequestMapping(value = "/child2ByteId-child2CharId-child2DoubleId", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching Many2oneCompChild2 with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Many2oneCompChild2 getByChild2ByteIdAndChild2CharIdAndChild2DoubleId(@RequestParam("child2ByteId") Byte child2ByteId, @RequestParam("child2CharId") String child2CharId, @RequestParam("child2DoubleId") BigDecimal child2DoubleId) {
        LOGGER.debug("Getting Many2oneCompChild2 with uniques key Child2ByteIdAndChild2CharIdAndChild2DoubleId");
        return many2oneCompChild2Service.getByChild2ByteIdAndChild2CharIdAndChild2DoubleId(child2ByteId, child2CharId, child2DoubleId);
    }

    /**
     * @deprecated Use {@link #findMany2oneCompChild2s(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Many2oneCompChild2 instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Many2oneCompChild2> searchMany2oneCompChild2sByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Many2oneCompChild2s list by query filter:{}", (Object) queryFilters);
        return many2oneCompChild2Service.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Many2oneCompChild2 instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Many2oneCompChild2> findMany2oneCompChild2s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Many2oneCompChild2s list by filter:", query);
        return many2oneCompChild2Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Many2oneCompChild2 instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Many2oneCompChild2> filterMany2oneCompChild2s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Many2oneCompChild2s list by filter", query);
        return many2oneCompChild2Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportMany2oneCompChild2s(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return many2oneCompChild2Service.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportMany2oneCompChild2sAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = Many2oneCompChild2.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> many2oneCompChild2Service.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of Many2oneCompChild2 instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countMany2oneCompChild2s( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Many2oneCompChild2s");
		return many2oneCompChild2Service.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getMany2oneCompChild2AggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return many2oneCompChild2Service.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Many2oneCompChild2Service instance
	 */
	protected void setMany2oneCompChild2Service(Many2oneCompChild2Service service) {
		this.many2oneCompChild2Service = service;
	}

}