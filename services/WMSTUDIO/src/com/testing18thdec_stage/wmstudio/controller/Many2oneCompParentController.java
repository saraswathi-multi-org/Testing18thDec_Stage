/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing18thdec_stage.wmstudio.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testing18thdec_stage.wmstudio.Many2oneCompChild;
import com.testing18thdec_stage.wmstudio.Many2oneCompParent;
import com.testing18thdec_stage.wmstudio.Many2oneCompParentId;
import com.testing18thdec_stage.wmstudio.service.Many2oneCompParentService;


/**
 * Controller object for domain model class Many2oneCompParent.
 * @see Many2oneCompParent
 */
@RestController("WMSTUDIO.Many2oneCompParentController")
@Api(value = "Many2oneCompParentController", description = "Exposes APIs to work with Many2oneCompParent resource.")
@RequestMapping("/WMSTUDIO/Many2oneCompParent")
public class Many2oneCompParentController {

    private static final Logger LOGGER = LoggerFactory.getLogger(Many2oneCompParentController.class);

    @Autowired
	@Qualifier("WMSTUDIO.Many2oneCompParentService")
	private Many2oneCompParentService many2oneCompParentService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new Many2oneCompParent instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Many2oneCompParent createMany2oneCompParent(@RequestBody Many2oneCompParent many2oneCompParent) {
		LOGGER.debug("Create Many2oneCompParent with information: {}" , many2oneCompParent);

		many2oneCompParent = many2oneCompParentService.create(many2oneCompParent);
		LOGGER.debug("Created Many2oneCompParent with information: {}" , many2oneCompParent);

	    return many2oneCompParent;
	}

    @ApiOperation(value = "Returns the Many2oneCompParent instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Many2oneCompParent getMany2oneCompParent(@RequestParam("stringId") String stringId, @RequestParam("byteId") Byte byteId, @RequestParam("floatId") Double floatId, @RequestParam("charId") String charId) {

        Many2oneCompParentId many2onecompparentId = new Many2oneCompParentId();
        many2onecompparentId.setStringId(stringId);
        many2onecompparentId.setByteId(byteId);
        many2onecompparentId.setFloatId(floatId);
        many2onecompparentId.setCharId(charId);

        LOGGER.debug("Getting Many2oneCompParent with id: {}" , many2onecompparentId);
        Many2oneCompParent many2oneCompParent = many2oneCompParentService.getById(many2onecompparentId);
        LOGGER.debug("Many2oneCompParent details with id: {}" , many2oneCompParent);

        return many2oneCompParent;
    }



    @ApiOperation(value = "Updates the Many2oneCompParent instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Many2oneCompParent editMany2oneCompParent(@RequestParam("stringId") String stringId, @RequestParam("byteId") Byte byteId, @RequestParam("floatId") Double floatId, @RequestParam("charId") String charId, @RequestBody Many2oneCompParent many2oneCompParent) {

        many2oneCompParent.setStringId(stringId);
        many2oneCompParent.setByteId(byteId);
        many2oneCompParent.setFloatId(floatId);
        many2oneCompParent.setCharId(charId);

        LOGGER.debug("Many2oneCompParent details with id is updated with: {}" , many2oneCompParent);

        return many2oneCompParentService.update(many2oneCompParent);
    }

	@ApiOperation(value = "Partially updates the  Many2oneCompParent instance associated with the given composite-id.")
	@RequestMapping(value = "/composite-id", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Many2oneCompParent patchMany2oneCompParent(@RequestParam("stringId") String stringId, @RequestParam("byteId") Byte byteId, @RequestParam("floatId") Double floatId, @RequestParam("charId") String charId, @RequestBody @MapTo(Many2oneCompParent.class) Map<String, Object> many2oneCompParentPatch) {

        Many2oneCompParentId many2onecompparentId = new Many2oneCompParentId();
        many2onecompparentId.setStringId(stringId);
        many2onecompparentId.setByteId(byteId);
        many2onecompparentId.setFloatId(floatId);
        many2onecompparentId.setCharId(charId);
        LOGGER.debug("Partially updating Many2oneCompParent with id: {}" , many2onecompparentId);

        Many2oneCompParent many2oneCompParent = many2oneCompParentService.partialUpdate(many2onecompparentId, many2oneCompParentPatch);
        LOGGER.debug("Many2oneCompParent details after partial update: {}" , many2oneCompParent);

        return many2oneCompParent;
    }


    @ApiOperation(value = "Deletes the Many2oneCompParent instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteMany2oneCompParent(@RequestParam("stringId") String stringId, @RequestParam("byteId") Byte byteId, @RequestParam("floatId") Double floatId, @RequestParam("charId") String charId) {

        Many2oneCompParentId many2onecompparentId = new Many2oneCompParentId();
        many2onecompparentId.setStringId(stringId);
        many2onecompparentId.setByteId(byteId);
        many2onecompparentId.setFloatId(floatId);
        many2onecompparentId.setCharId(charId);

        LOGGER.debug("Deleting Many2oneCompParent with id: {}" , many2onecompparentId);
        Many2oneCompParent many2oneCompParent = many2oneCompParentService.delete(many2onecompparentId);

        return many2oneCompParent != null;
    }


    /**
     * @deprecated Use {@link #findMany2oneCompParents(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Many2oneCompParent instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Many2oneCompParent> searchMany2oneCompParentsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Many2oneCompParents list by query filter:{}", (Object) queryFilters);
        return many2oneCompParentService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Many2oneCompParent instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Many2oneCompParent> findMany2oneCompParents(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Many2oneCompParents list by filter:", query);
        return many2oneCompParentService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Many2oneCompParent instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Many2oneCompParent> filterMany2oneCompParents(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Many2oneCompParents list by filter", query);
        return many2oneCompParentService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportMany2oneCompParents(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return many2oneCompParentService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportMany2oneCompParentsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = Many2oneCompParent.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> many2oneCompParentService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of Many2oneCompParent instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countMany2oneCompParents( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Many2oneCompParents");
		return many2oneCompParentService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getMany2oneCompParentAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return many2oneCompParentService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/composite-id/many2oneCompChilds", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the many2oneCompChilds instance associated with the given composite-id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Many2oneCompChild> findAssociatedMany2oneCompChilds(@RequestParam("stringId") String stringId, @RequestParam("byteId") Byte byteId, @RequestParam("floatId") Double floatId, @RequestParam("charId") String charId, Pageable pageable) {

        LOGGER.debug("Fetching all associated many2oneCompChilds");
        return many2oneCompParentService.findAssociatedMany2oneCompChilds(stringId, byteId, floatId, charId, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Many2oneCompParentService instance
	 */
	protected void setMany2oneCompParentService(Many2oneCompParentService service) {
		this.many2oneCompParentService = service;
	}

}