/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing18thdec_stage.wmstudio.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testing18thdec_stage.wmstudio.One2oneChild;
import com.testing18thdec_stage.wmstudio.service.One2oneChildService;


/**
 * Controller object for domain model class One2oneChild.
 * @see One2oneChild
 */
@RestController("WMSTUDIO.One2oneChildController")
@Api(value = "One2oneChildController", description = "Exposes APIs to work with One2oneChild resource.")
@RequestMapping("/WMSTUDIO/One2oneChild")
public class One2oneChildController {

    private static final Logger LOGGER = LoggerFactory.getLogger(One2oneChildController.class);

    @Autowired
	@Qualifier("WMSTUDIO.One2oneChildService")
	private One2oneChildService one2oneChildService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new One2oneChild instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public One2oneChild createOne2oneChild(@RequestBody One2oneChild one2oneChild) {
		LOGGER.debug("Create One2oneChild with information: {}" , one2oneChild);

		one2oneChild = one2oneChildService.create(one2oneChild);
		LOGGER.debug("Created One2oneChild with information: {}" , one2oneChild);

	    return one2oneChild;
	}

    @ApiOperation(value = "Returns the One2oneChild instance associated with the given id.")
    @RequestMapping(value = "/{bytePk:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public One2oneChild getOne2oneChild(@PathVariable("bytePk") Byte bytePk) {
        LOGGER.debug("Getting One2oneChild with id: {}" , bytePk);

        One2oneChild foundOne2oneChild = one2oneChildService.getById(bytePk);
        LOGGER.debug("One2oneChild details with id: {}" , foundOne2oneChild);

        return foundOne2oneChild;
    }

    @ApiOperation(value = "Updates the One2oneChild instance associated with the given id.")
    @RequestMapping(value = "/{bytePk:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public One2oneChild editOne2oneChild(@PathVariable("bytePk") Byte bytePk, @RequestBody One2oneChild one2oneChild) {
        LOGGER.debug("Editing One2oneChild with id: {}" , one2oneChild.getBytePk());

        one2oneChild.setBytePk(bytePk);
        one2oneChild = one2oneChildService.update(one2oneChild);
        LOGGER.debug("One2oneChild details with id: {}" , one2oneChild);

        return one2oneChild;
    }
    
    @ApiOperation(value = "Partially updates the One2oneChild instance associated with the given id.")
    @RequestMapping(value = "/{bytePk:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public One2oneChild patchOne2oneChild(@PathVariable("bytePk") Byte bytePk, @RequestBody @MapTo(One2oneChild.class) Map<String, Object> one2oneChildPatch) {
        LOGGER.debug("Partially updating One2oneChild with id: {}" , bytePk);

        One2oneChild one2oneChild = one2oneChildService.partialUpdate(bytePk, one2oneChildPatch);
        LOGGER.debug("One2oneChild details after partial update: {}" , one2oneChild);

        return one2oneChild;
    }

    @ApiOperation(value = "Deletes the One2oneChild instance associated with the given id.")
    @RequestMapping(value = "/{bytePk:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteOne2oneChild(@PathVariable("bytePk") Byte bytePk) {
        LOGGER.debug("Deleting One2oneChild with id: {}" , bytePk);

        One2oneChild deletedOne2oneChild = one2oneChildService.delete(bytePk);

        return deletedOne2oneChild != null;
    }

    /**
     * @deprecated Use {@link #findOne2oneChilds(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of One2oneChild instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<One2oneChild> searchOne2oneChildsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering One2oneChilds list by query filter:{}", (Object) queryFilters);
        return one2oneChildService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of One2oneChild instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<One2oneChild> findOne2oneChilds(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering One2oneChilds list by filter:", query);
        return one2oneChildService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of One2oneChild instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<One2oneChild> filterOne2oneChilds(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering One2oneChilds list by filter", query);
        return one2oneChildService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportOne2oneChilds(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return one2oneChildService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportOne2oneChildsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = One2oneChild.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> one2oneChildService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of One2oneChild instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countOne2oneChilds( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting One2oneChilds");
		return one2oneChildService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getOne2oneChildAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return one2oneChildService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service One2oneChildService instance
	 */
	protected void setOne2oneChildService(One2oneChildService service) {
		this.one2oneChildService = service;
	}

}