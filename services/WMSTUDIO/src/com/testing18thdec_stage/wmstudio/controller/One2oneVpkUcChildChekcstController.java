/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing18thdec_stage.wmstudio.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.math.BigInteger;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testing18thdec_stage.wmstudio.One2oneVpkUcChildChekcst;
import com.testing18thdec_stage.wmstudio.One2oneVpkUcChildChekcstId;
import com.testing18thdec_stage.wmstudio.service.One2oneVpkUcChildChekcstService;


/**
 * Controller object for domain model class One2oneVpkUcChildChekcst.
 * @see One2oneVpkUcChildChekcst
 */
@RestController("WMSTUDIO.One2oneVpkUcChildChekcstController")
@Api(value = "One2oneVpkUcChildChekcstController", description = "Exposes APIs to work with One2oneVpkUcChildChekcst resource.")
@RequestMapping("/WMSTUDIO/One2oneVpkUcChildChekcst")
public class One2oneVpkUcChildChekcstController {

    private static final Logger LOGGER = LoggerFactory.getLogger(One2oneVpkUcChildChekcstController.class);

    @Autowired
	@Qualifier("WMSTUDIO.One2oneVpkUcChildChekcstService")
	private One2oneVpkUcChildChekcstService one2oneVpkUcChildChekcstService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new One2oneVpkUcChildChekcst instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public One2oneVpkUcChildChekcst createOne2oneVpkUcChildChekcst(@RequestBody One2oneVpkUcChildChekcst one2oneVpkUcChildChekcst) {
		LOGGER.debug("Create One2oneVpkUcChildChekcst with information: {}" , one2oneVpkUcChildChekcst);

		one2oneVpkUcChildChekcst = one2oneVpkUcChildChekcstService.create(one2oneVpkUcChildChekcst);
		LOGGER.debug("Created One2oneVpkUcChildChekcst with information: {}" , one2oneVpkUcChildChekcst);

	    return one2oneVpkUcChildChekcst;
	}

    @ApiOperation(value = "Returns the One2oneVpkUcChildChekcst instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public One2oneVpkUcChildChekcst getOne2oneVpkUcChildChekcst(@RequestParam("characterCol") String characterCol, @RequestParam("floatCol") Double floatCol, @RequestParam("smallintCol") BigInteger smallintCol, @RequestParam("stringCol") String stringCol, @RequestParam("integerCol") BigInteger integerCol) {

        One2oneVpkUcChildChekcstId one2onevpkucchildchekcstId = new One2oneVpkUcChildChekcstId();
        one2onevpkucchildchekcstId.setCharacterCol(characterCol);
        one2onevpkucchildchekcstId.setFloatCol(floatCol);
        one2onevpkucchildchekcstId.setSmallintCol(smallintCol);
        one2onevpkucchildchekcstId.setStringCol(stringCol);
        one2onevpkucchildchekcstId.setIntegerCol(integerCol);

        LOGGER.debug("Getting One2oneVpkUcChildChekcst with id: {}" , one2onevpkucchildchekcstId);
        One2oneVpkUcChildChekcst one2oneVpkUcChildChekcst = one2oneVpkUcChildChekcstService.getById(one2onevpkucchildchekcstId);
        LOGGER.debug("One2oneVpkUcChildChekcst details with id: {}" , one2oneVpkUcChildChekcst);

        return one2oneVpkUcChildChekcst;
    }



    @ApiOperation(value = "Updates the One2oneVpkUcChildChekcst instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public One2oneVpkUcChildChekcst editOne2oneVpkUcChildChekcst(@RequestParam("characterCol") String characterCol, @RequestParam("floatCol") Double floatCol, @RequestParam("smallintCol") BigInteger smallintCol, @RequestParam("stringCol") String stringCol, @RequestParam("integerCol") BigInteger integerCol, @RequestBody One2oneVpkUcChildChekcst one2oneVpkUcChildChekcst) {

        one2oneVpkUcChildChekcst.setCharacterCol(characterCol);
        one2oneVpkUcChildChekcst.setFloatCol(floatCol);
        one2oneVpkUcChildChekcst.setSmallintCol(smallintCol);
        one2oneVpkUcChildChekcst.setStringCol(stringCol);
        one2oneVpkUcChildChekcst.setIntegerCol(integerCol);

        LOGGER.debug("One2oneVpkUcChildChekcst details with id is updated with: {}" , one2oneVpkUcChildChekcst);

        return one2oneVpkUcChildChekcstService.update(one2oneVpkUcChildChekcst);
    }

	@ApiOperation(value = "Partially updates the  One2oneVpkUcChildChekcst instance associated with the given composite-id.")
	@RequestMapping(value = "/composite-id", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public One2oneVpkUcChildChekcst patchOne2oneVpkUcChildChekcst(@RequestParam("characterCol") String characterCol, @RequestParam("floatCol") Double floatCol, @RequestParam("smallintCol") BigInteger smallintCol, @RequestParam("stringCol") String stringCol, @RequestParam("integerCol") BigInteger integerCol, @RequestBody @MapTo(One2oneVpkUcChildChekcst.class) Map<String, Object> one2oneVpkUcChildChekcstPatch) {

        One2oneVpkUcChildChekcstId one2onevpkucchildchekcstId = new One2oneVpkUcChildChekcstId();
        one2onevpkucchildchekcstId.setCharacterCol(characterCol);
        one2onevpkucchildchekcstId.setFloatCol(floatCol);
        one2onevpkucchildchekcstId.setSmallintCol(smallintCol);
        one2onevpkucchildchekcstId.setStringCol(stringCol);
        one2onevpkucchildchekcstId.setIntegerCol(integerCol);
        LOGGER.debug("Partially updating One2oneVpkUcChildChekcst with id: {}" , one2onevpkucchildchekcstId);

        One2oneVpkUcChildChekcst one2oneVpkUcChildChekcst = one2oneVpkUcChildChekcstService.partialUpdate(one2onevpkucchildchekcstId, one2oneVpkUcChildChekcstPatch);
        LOGGER.debug("One2oneVpkUcChildChekcst details after partial update: {}" , one2oneVpkUcChildChekcst);

        return one2oneVpkUcChildChekcst;
    }


    @ApiOperation(value = "Deletes the One2oneVpkUcChildChekcst instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteOne2oneVpkUcChildChekcst(@RequestParam("characterCol") String characterCol, @RequestParam("floatCol") Double floatCol, @RequestParam("smallintCol") BigInteger smallintCol, @RequestParam("stringCol") String stringCol, @RequestParam("integerCol") BigInteger integerCol) {

        One2oneVpkUcChildChekcstId one2onevpkucchildchekcstId = new One2oneVpkUcChildChekcstId();
        one2onevpkucchildchekcstId.setCharacterCol(characterCol);
        one2onevpkucchildchekcstId.setFloatCol(floatCol);
        one2onevpkucchildchekcstId.setSmallintCol(smallintCol);
        one2onevpkucchildchekcstId.setStringCol(stringCol);
        one2onevpkucchildchekcstId.setIntegerCol(integerCol);

        LOGGER.debug("Deleting One2oneVpkUcChildChekcst with id: {}" , one2onevpkucchildchekcstId);
        One2oneVpkUcChildChekcst one2oneVpkUcChildChekcst = one2oneVpkUcChildChekcstService.delete(one2onevpkucchildchekcstId);

        return one2oneVpkUcChildChekcst != null;
    }


    /**
     * @deprecated Use {@link #findOne2oneVpkUcChildChekcsts(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of One2oneVpkUcChildChekcst instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<One2oneVpkUcChildChekcst> searchOne2oneVpkUcChildChekcstsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering One2oneVpkUcChildChekcsts list by query filter:{}", (Object) queryFilters);
        return one2oneVpkUcChildChekcstService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of One2oneVpkUcChildChekcst instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<One2oneVpkUcChildChekcst> findOne2oneVpkUcChildChekcsts(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering One2oneVpkUcChildChekcsts list by filter:", query);
        return one2oneVpkUcChildChekcstService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of One2oneVpkUcChildChekcst instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<One2oneVpkUcChildChekcst> filterOne2oneVpkUcChildChekcsts(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering One2oneVpkUcChildChekcsts list by filter", query);
        return one2oneVpkUcChildChekcstService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportOne2oneVpkUcChildChekcsts(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return one2oneVpkUcChildChekcstService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportOne2oneVpkUcChildChekcstsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = One2oneVpkUcChildChekcst.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> one2oneVpkUcChildChekcstService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of One2oneVpkUcChildChekcst instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countOne2oneVpkUcChildChekcsts( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting One2oneVpkUcChildChekcsts");
		return one2oneVpkUcChildChekcstService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getOne2oneVpkUcChildChekcstAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return one2oneVpkUcChildChekcstService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service One2oneVpkUcChildChekcstService instance
	 */
	protected void setOne2oneVpkUcChildChekcstService(One2oneVpkUcChildChekcstService service) {
		this.one2oneVpkUcChildChekcstService = service;
	}

}