/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing18thdec_stage.wmstudio;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinColumns;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

/**
 * Many2oneCompChild2 generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`MANY2ONE_COMP_CHILD2`", uniqueConstraints = {
            @UniqueConstraint(name = "`UK_MANY2ONE_COMP_CHILD2_yLnKX`", columnNames = {"`CHILD2 BYTE ID`", "`CHILD2 CHAR ID`", "`CHILD2 DOUBLE ID`"})})
public class Many2oneCompChild2 implements Serializable {

    private Integer pkId;
    private Byte child2ByteId;
    private String child2CharId;
    private LocalDateTime datetimeCol;
    private BigDecimal child2DoubleId;
    private Many2oneCompChild many2oneCompChild;

    @Id
    @Column(name = "`PK ID`", nullable = false, scale = 0, precision = 10)
    public Integer getPkId() {
        return this.pkId;
    }

    public void setPkId(Integer pkId) {
        this.pkId = pkId;
    }

    @Column(name = "`CHILD2 BYTE ID`", nullable = true, scale = 0, precision = 2)
    public Byte getChild2ByteId() {
        return this.child2ByteId;
    }

    public void setChild2ByteId(Byte child2ByteId) {
        this.child2ByteId = child2ByteId;
    }

    @Column(name = "`CHILD2 CHAR ID`", nullable = true, length = 1)
    public String getChild2CharId() {
        return this.child2CharId;
    }

    public void setChild2CharId(String child2CharId) {
        this.child2CharId = child2CharId;
    }

    @Column(name = "`DATETIME COL`", nullable = true)
    public LocalDateTime getDatetimeCol() {
        return this.datetimeCol;
    }

    public void setDatetimeCol(LocalDateTime datetimeCol) {
        this.datetimeCol = datetimeCol;
    }

    @Column(name = "`CHILD2 DOUBLE ID`", nullable = true, scale = 8, precision = 18)
    public BigDecimal getChild2DoubleId() {
        return this.child2DoubleId;
    }

    public void setChild2DoubleId(BigDecimal child2DoubleId) {
        this.child2DoubleId = child2DoubleId;
    }

    @OneToOne(fetch = FetchType.EAGER)
    @JoinColumns(value = {
            @JoinColumn(name = "`CHILD2 DOUBLE ID`", referencedColumnName = "`DOUBLE ID`", insertable = false, updatable = false),
            @JoinColumn(name = "`CHILD2 BYTE ID`", referencedColumnName = "`BYTE ID`", insertable = false, updatable = false),
            @JoinColumn(name = "`CHILD2 CHAR ID`", referencedColumnName = "`CHAR ID`", insertable = false, updatable = false)},
        foreignKey = @ForeignKey(name = "`FK_MANY2ONE_COMP_CHILD2_wzuwN`"))
    @Fetch(FetchMode.JOIN)
    public Many2oneCompChild getMany2oneCompChild() {
        return this.many2oneCompChild;
    }

    public void setMany2oneCompChild(Many2oneCompChild many2oneCompChild) {
        if(many2oneCompChild != null) {
            this.child2DoubleId = many2oneCompChild.getDoubleId();
            this.child2ByteId = many2oneCompChild.getByteId();
            this.child2CharId = many2oneCompChild.getCharId();
        }

        this.many2oneCompChild = many2oneCompChild;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Many2oneCompChild2)) return false;
        final Many2oneCompChild2 many2oneCompChild2 = (Many2oneCompChild2) o;
        return Objects.equals(getPkId(), many2oneCompChild2.getPkId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getPkId());
    }
}