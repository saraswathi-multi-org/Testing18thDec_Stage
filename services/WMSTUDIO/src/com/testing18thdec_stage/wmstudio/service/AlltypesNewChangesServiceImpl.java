/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing18thdec_stage.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing18thdec_stage.wmstudio.AlltypesNewChanges;


/**
 * ServiceImpl object for domain model class AlltypesNewChanges.
 *
 * @see AlltypesNewChanges
 */
@Service("WMSTUDIO.AlltypesNewChangesService")
@Validated
@EntityService(entityClass = AlltypesNewChanges.class, serviceId = "WMSTUDIO")
public class AlltypesNewChangesServiceImpl implements AlltypesNewChangesService {

    private static final Logger LOGGER = LoggerFactory.getLogger(AlltypesNewChangesServiceImpl.class);


    @Autowired
    @Qualifier("WMSTUDIO.AlltypesNewChangesDao")
    private WMGenericDao<AlltypesNewChanges, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<AlltypesNewChanges, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
    public AlltypesNewChanges create(AlltypesNewChanges alltypesNewChanges) {
        LOGGER.debug("Creating a new AlltypesNewChanges with information: {}", alltypesNewChanges);

        AlltypesNewChanges alltypesNewChangesCreated = this.wmGenericDao.create(alltypesNewChanges);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(alltypesNewChangesCreated);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public AlltypesNewChanges getById(Integer alltypesnewchangesId) {
        LOGGER.debug("Finding AlltypesNewChanges by id: {}", alltypesnewchangesId);
        return this.wmGenericDao.findById(alltypesnewchangesId);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public AlltypesNewChanges findById(Integer alltypesnewchangesId) {
        LOGGER.debug("Finding AlltypesNewChanges by id: {}", alltypesnewchangesId);
        try {
            return this.wmGenericDao.findById(alltypesnewchangesId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No AlltypesNewChanges found with id: {}", alltypesnewchangesId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public List<AlltypesNewChanges> findByMultipleIds(List<Integer> alltypesnewchangesIds, boolean orderedReturn) {
        LOGGER.debug("Finding AlltypesNewChanges by ids: {}", alltypesnewchangesIds);

        return this.wmGenericDao.findByMultipleIds(alltypesnewchangesIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "WMSTUDIOTransactionManager")
    @Override
    public AlltypesNewChanges update(AlltypesNewChanges alltypesNewChanges) {
        LOGGER.debug("Updating AlltypesNewChanges with information: {}", alltypesNewChanges);

        this.wmGenericDao.update(alltypesNewChanges);
        this.wmGenericDao.refresh(alltypesNewChanges);

        return alltypesNewChanges;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
    public AlltypesNewChanges partialUpdate(Integer alltypesnewchangesId, Map<String, Object>alltypesNewChangesPatch) {
        LOGGER.debug("Partially Updating the AlltypesNewChanges with id: {}", alltypesnewchangesId);

        AlltypesNewChanges alltypesNewChanges = getById(alltypesnewchangesId);

        try {
            ObjectReader alltypesNewChangesReader = this.objectMapper.reader().forType(AlltypesNewChanges.class).withValueToUpdate(alltypesNewChanges);
            alltypesNewChanges = alltypesNewChangesReader.readValue(this.objectMapper.writeValueAsString(alltypesNewChangesPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", alltypesNewChangesPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        alltypesNewChanges = update(alltypesNewChanges);

        return alltypesNewChanges;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
    public AlltypesNewChanges delete(Integer alltypesnewchangesId) {
        LOGGER.debug("Deleting AlltypesNewChanges with id: {}", alltypesnewchangesId);
        AlltypesNewChanges deleted = this.wmGenericDao.findById(alltypesnewchangesId);
        if (deleted == null) {
            LOGGER.debug("No AlltypesNewChanges found with id: {}", alltypesnewchangesId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), AlltypesNewChanges.class.getSimpleName(), alltypesnewchangesId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
    public void delete(AlltypesNewChanges alltypesNewChanges) {
        LOGGER.debug("Deleting AlltypesNewChanges with {}", alltypesNewChanges);
        this.wmGenericDao.delete(alltypesNewChanges);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<AlltypesNewChanges> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all AlltypesNewChanges");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<AlltypesNewChanges> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all AlltypesNewChanges");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service WMSTUDIO for table AlltypesNewChanges to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service WMSTUDIO for table AlltypesNewChanges to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}