/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing18thdec_stage.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing18thdec_stage.wmstudio.UserTable;

/**
 * Service object for domain model class {@link UserTable}.
 */
public interface UserTableService {

    /**
     * Creates a new UserTable. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on UserTable if any.
     *
     * @param userTable Details of the UserTable to be created; value cannot be null.
     * @return The newly created UserTable.
     */
    UserTable create(@Valid UserTable userTable);


	/**
     * Returns UserTable by given id if exists.
     *
     * @param usertableId The id of the UserTable to get; value cannot be null.
     * @return UserTable associated with the given usertableId.
	 * @throws EntityNotFoundException If no UserTable is found.
     */
    UserTable getById(Integer usertableId);

    /**
     * Find and return the UserTable by given id if exists, returns null otherwise.
     *
     * @param usertableId The id of the UserTable to get; value cannot be null.
     * @return UserTable associated with the given usertableId.
     */
    UserTable findById(Integer usertableId);

	/**
     * Find and return the list of UserTables by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param usertableIds The id's of the UserTable to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return UserTables associated with the given usertableIds.
     */
    List<UserTable> findByMultipleIds(List<Integer> usertableIds, boolean orderedReturn);


    /**
     * Updates the details of an existing UserTable. It replaces all fields of the existing UserTable with the given userTable.
     *
     * This method overrides the input field values using Server side or database managed properties defined on UserTable if any.
     *
     * @param userTable The details of the UserTable to be updated; value cannot be null.
     * @return The updated UserTable.
     * @throws EntityNotFoundException if no UserTable is found with given input.
     */
    UserTable update(@Valid UserTable userTable);


    /**
     * Partially updates the details of an existing UserTable. It updates only the
     * fields of the existing UserTable which are passed in the userTablePatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on UserTable if any.
     *
     * @param usertableId The id of the UserTable to be deleted; value cannot be null.
     * @param userTablePatch The partial data of UserTable which is supposed to be updated; value cannot be null.
     * @return The updated UserTable.
     * @throws EntityNotFoundException if no UserTable is found with given input.
     */
    UserTable partialUpdate(Integer usertableId, Map<String, Object> userTablePatch);

    /**
     * Deletes an existing UserTable with the given id.
     *
     * @param usertableId The id of the UserTable to be deleted; value cannot be null.
     * @return The deleted UserTable.
     * @throws EntityNotFoundException if no UserTable found with the given id.
     */
    UserTable delete(Integer usertableId);

    /**
     * Deletes an existing UserTable with the given object.
     *
     * @param userTable The instance of the UserTable to be deleted; value cannot be null.
     */
    void delete(UserTable userTable);

    /**
     * Find all UserTables matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching UserTables.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<UserTable> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all UserTables matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching UserTables.
     *
     * @see Pageable
     * @see Page
     */
    Page<UserTable> findAll(String query, Pageable pageable);

    /**
     * Exports all UserTables matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all UserTables matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the UserTables in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the UserTable.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}