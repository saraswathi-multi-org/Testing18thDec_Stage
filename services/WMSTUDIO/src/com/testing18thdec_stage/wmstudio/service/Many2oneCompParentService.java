/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing18thdec_stage.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing18thdec_stage.wmstudio.Many2oneCompChild;
import com.testing18thdec_stage.wmstudio.Many2oneCompParent;
import com.testing18thdec_stage.wmstudio.Many2oneCompParentId;

/**
 * Service object for domain model class {@link Many2oneCompParent}.
 */
public interface Many2oneCompParentService {

    /**
     * Creates a new Many2oneCompParent. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Many2oneCompParent if any.
     *
     * @param many2oneCompParent Details of the Many2oneCompParent to be created; value cannot be null.
     * @return The newly created Many2oneCompParent.
     */
    Many2oneCompParent create(@Valid Many2oneCompParent many2oneCompParent);


	/**
     * Returns Many2oneCompParent by given id if exists.
     *
     * @param many2onecompparentId The id of the Many2oneCompParent to get; value cannot be null.
     * @return Many2oneCompParent associated with the given many2onecompparentId.
	 * @throws EntityNotFoundException If no Many2oneCompParent is found.
     */
    Many2oneCompParent getById(Many2oneCompParentId many2onecompparentId);

    /**
     * Find and return the Many2oneCompParent by given id if exists, returns null otherwise.
     *
     * @param many2onecompparentId The id of the Many2oneCompParent to get; value cannot be null.
     * @return Many2oneCompParent associated with the given many2onecompparentId.
     */
    Many2oneCompParent findById(Many2oneCompParentId many2onecompparentId);

	/**
     * Find and return the list of Many2oneCompParents by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param many2onecompparentIds The id's of the Many2oneCompParent to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Many2oneCompParents associated with the given many2onecompparentIds.
     */
    List<Many2oneCompParent> findByMultipleIds(List<Many2oneCompParentId> many2onecompparentIds, boolean orderedReturn);


    /**
     * Updates the details of an existing Many2oneCompParent. It replaces all fields of the existing Many2oneCompParent with the given many2oneCompParent.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Many2oneCompParent if any.
     *
     * @param many2oneCompParent The details of the Many2oneCompParent to be updated; value cannot be null.
     * @return The updated Many2oneCompParent.
     * @throws EntityNotFoundException if no Many2oneCompParent is found with given input.
     */
    Many2oneCompParent update(@Valid Many2oneCompParent many2oneCompParent);


    /**
     * Partially updates the details of an existing Many2oneCompParent. It updates only the
     * fields of the existing Many2oneCompParent which are passed in the many2oneCompParentPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Many2oneCompParent if any.
     *
     * @param many2onecompparentId The id of the Many2oneCompParent to be deleted; value cannot be null.
     * @param many2oneCompParentPatch The partial data of Many2oneCompParent which is supposed to be updated; value cannot be null.
     * @return The updated Many2oneCompParent.
     * @throws EntityNotFoundException if no Many2oneCompParent is found with given input.
     */
    Many2oneCompParent partialUpdate(Many2oneCompParentId many2onecompparentId, Map<String, Object> many2oneCompParentPatch);

    /**
     * Deletes an existing Many2oneCompParent with the given id.
     *
     * @param many2onecompparentId The id of the Many2oneCompParent to be deleted; value cannot be null.
     * @return The deleted Many2oneCompParent.
     * @throws EntityNotFoundException if no Many2oneCompParent found with the given id.
     */
    Many2oneCompParent delete(Many2oneCompParentId many2onecompparentId);

    /**
     * Deletes an existing Many2oneCompParent with the given object.
     *
     * @param many2oneCompParent The instance of the Many2oneCompParent to be deleted; value cannot be null.
     */
    void delete(Many2oneCompParent many2oneCompParent);

    /**
     * Find all Many2oneCompParents matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Many2oneCompParents.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Many2oneCompParent> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Many2oneCompParents matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Many2oneCompParents.
     *
     * @see Pageable
     * @see Page
     */
    Page<Many2oneCompParent> findAll(String query, Pageable pageable);

    /**
     * Exports all Many2oneCompParents matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Many2oneCompParents matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Many2oneCompParents in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Many2oneCompParent.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated many2oneCompChilds for given Many2oneCompParent id.
     *
     * @param stringId value of stringId; value cannot be null
     * @param byteId value of byteId; value cannot be null
     * @param floatId value of floatId; value cannot be null
     * @param charId value of charId; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Many2oneCompChild instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Many2oneCompChild> findAssociatedMany2oneCompChilds(String stringId, Byte byteId, Double floatId, String charId, Pageable pageable);

}