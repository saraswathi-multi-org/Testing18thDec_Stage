/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing18thdec_stage.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing18thdec_stage.wmstudio.AlltypesNewChanges;

/**
 * Service object for domain model class {@link AlltypesNewChanges}.
 */
public interface AlltypesNewChangesService {

    /**
     * Creates a new AlltypesNewChanges. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on AlltypesNewChanges if any.
     *
     * @param alltypesNewChanges Details of the AlltypesNewChanges to be created; value cannot be null.
     * @return The newly created AlltypesNewChanges.
     */
    AlltypesNewChanges create(@Valid AlltypesNewChanges alltypesNewChanges);


	/**
     * Returns AlltypesNewChanges by given id if exists.
     *
     * @param alltypesnewchangesId The id of the AlltypesNewChanges to get; value cannot be null.
     * @return AlltypesNewChanges associated with the given alltypesnewchangesId.
	 * @throws EntityNotFoundException If no AlltypesNewChanges is found.
     */
    AlltypesNewChanges getById(Integer alltypesnewchangesId);

    /**
     * Find and return the AlltypesNewChanges by given id if exists, returns null otherwise.
     *
     * @param alltypesnewchangesId The id of the AlltypesNewChanges to get; value cannot be null.
     * @return AlltypesNewChanges associated with the given alltypesnewchangesId.
     */
    AlltypesNewChanges findById(Integer alltypesnewchangesId);

	/**
     * Find and return the list of AlltypesNewChanges by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param alltypesnewchangesIds The id's of the AlltypesNewChanges to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return AlltypesNewChanges associated with the given alltypesnewchangesIds.
     */
    List<AlltypesNewChanges> findByMultipleIds(List<Integer> alltypesnewchangesIds, boolean orderedReturn);


    /**
     * Updates the details of an existing AlltypesNewChanges. It replaces all fields of the existing AlltypesNewChanges with the given alltypesNewChanges.
     *
     * This method overrides the input field values using Server side or database managed properties defined on AlltypesNewChanges if any.
     *
     * @param alltypesNewChanges The details of the AlltypesNewChanges to be updated; value cannot be null.
     * @return The updated AlltypesNewChanges.
     * @throws EntityNotFoundException if no AlltypesNewChanges is found with given input.
     */
    AlltypesNewChanges update(@Valid AlltypesNewChanges alltypesNewChanges);


    /**
     * Partially updates the details of an existing AlltypesNewChanges. It updates only the
     * fields of the existing AlltypesNewChanges which are passed in the alltypesNewChangesPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on AlltypesNewChanges if any.
     *
     * @param alltypesnewchangesId The id of the AlltypesNewChanges to be deleted; value cannot be null.
     * @param alltypesNewChangesPatch The partial data of AlltypesNewChanges which is supposed to be updated; value cannot be null.
     * @return The updated AlltypesNewChanges.
     * @throws EntityNotFoundException if no AlltypesNewChanges is found with given input.
     */
    AlltypesNewChanges partialUpdate(Integer alltypesnewchangesId, Map<String, Object> alltypesNewChangesPatch);

    /**
     * Deletes an existing AlltypesNewChanges with the given id.
     *
     * @param alltypesnewchangesId The id of the AlltypesNewChanges to be deleted; value cannot be null.
     * @return The deleted AlltypesNewChanges.
     * @throws EntityNotFoundException if no AlltypesNewChanges found with the given id.
     */
    AlltypesNewChanges delete(Integer alltypesnewchangesId);

    /**
     * Deletes an existing AlltypesNewChanges with the given object.
     *
     * @param alltypesNewChanges The instance of the AlltypesNewChanges to be deleted; value cannot be null.
     */
    void delete(AlltypesNewChanges alltypesNewChanges);

    /**
     * Find all AlltypesNewChanges matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching AlltypesNewChanges.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<AlltypesNewChanges> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all AlltypesNewChanges matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching AlltypesNewChanges.
     *
     * @see Pageable
     * @see Page
     */
    Page<AlltypesNewChanges> findAll(String query, Pageable pageable);

    /**
     * Exports all AlltypesNewChanges matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all AlltypesNewChanges matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the AlltypesNewChanges in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the AlltypesNewChanges.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}