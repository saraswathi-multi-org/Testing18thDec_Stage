/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing18thdec_stage.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing18thdec_stage.wmstudio.One2oneUcChild1;

/**
 * Service object for domain model class {@link One2oneUcChild1}.
 */
public interface One2oneUcChild1Service {

    /**
     * Creates a new One2oneUcChild1. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on One2oneUcChild1 if any.
     *
     * @param one2oneUcChild1 Details of the One2oneUcChild1 to be created; value cannot be null.
     * @return The newly created One2oneUcChild1.
     */
    One2oneUcChild1 create(@Valid One2oneUcChild1 one2oneUcChild1);


	/**
     * Returns One2oneUcChild1 by given id if exists.
     *
     * @param one2oneucchild1Id The id of the One2oneUcChild1 to get; value cannot be null.
     * @return One2oneUcChild1 associated with the given one2oneucchild1Id.
	 * @throws EntityNotFoundException If no One2oneUcChild1 is found.
     */
    One2oneUcChild1 getById(Short one2oneucchild1Id);

    /**
     * Find and return the One2oneUcChild1 by given id if exists, returns null otherwise.
     *
     * @param one2oneucchild1Id The id of the One2oneUcChild1 to get; value cannot be null.
     * @return One2oneUcChild1 associated with the given one2oneucchild1Id.
     */
    One2oneUcChild1 findById(Short one2oneucchild1Id);

	/**
     * Find and return the list of One2oneUcChild1s by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param one2oneucchild1Ids The id's of the One2oneUcChild1 to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return One2oneUcChild1s associated with the given one2oneucchild1Ids.
     */
    List<One2oneUcChild1> findByMultipleIds(List<Short> one2oneucchild1Ids, boolean orderedReturn);

    /**
     * Find and return the One2oneUcChild1 for given emailCol  if exists.
     *
     * @param emailCol value of emailCol; value cannot be null.
     * @return One2oneUcChild1 associated with the given inputs.
     * @throws EntityNotFoundException if no matching One2oneUcChild1 found.
     */
    One2oneUcChild1 getByEmailCol(String emailCol);

    /**
     * Updates the details of an existing One2oneUcChild1. It replaces all fields of the existing One2oneUcChild1 with the given one2oneUcChild1.
     *
     * This method overrides the input field values using Server side or database managed properties defined on One2oneUcChild1 if any.
     *
     * @param one2oneUcChild1 The details of the One2oneUcChild1 to be updated; value cannot be null.
     * @return The updated One2oneUcChild1.
     * @throws EntityNotFoundException if no One2oneUcChild1 is found with given input.
     */
    One2oneUcChild1 update(@Valid One2oneUcChild1 one2oneUcChild1);


    /**
     * Partially updates the details of an existing One2oneUcChild1. It updates only the
     * fields of the existing One2oneUcChild1 which are passed in the one2oneUcChild1Patch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on One2oneUcChild1 if any.
     *
     * @param one2oneucchild1Id The id of the One2oneUcChild1 to be deleted; value cannot be null.
     * @param one2oneUcChild1Patch The partial data of One2oneUcChild1 which is supposed to be updated; value cannot be null.
     * @return The updated One2oneUcChild1.
     * @throws EntityNotFoundException if no One2oneUcChild1 is found with given input.
     */
    One2oneUcChild1 partialUpdate(Short one2oneucchild1Id, Map<String, Object> one2oneUcChild1Patch);

    /**
     * Deletes an existing One2oneUcChild1 with the given id.
     *
     * @param one2oneucchild1Id The id of the One2oneUcChild1 to be deleted; value cannot be null.
     * @return The deleted One2oneUcChild1.
     * @throws EntityNotFoundException if no One2oneUcChild1 found with the given id.
     */
    One2oneUcChild1 delete(Short one2oneucchild1Id);

    /**
     * Deletes an existing One2oneUcChild1 with the given object.
     *
     * @param one2oneUcChild1 The instance of the One2oneUcChild1 to be deleted; value cannot be null.
     */
    void delete(One2oneUcChild1 one2oneUcChild1);

    /**
     * Find all One2oneUcChild1s matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching One2oneUcChild1s.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<One2oneUcChild1> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all One2oneUcChild1s matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching One2oneUcChild1s.
     *
     * @see Pageable
     * @see Page
     */
    Page<One2oneUcChild1> findAll(String query, Pageable pageable);

    /**
     * Exports all One2oneUcChild1s matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all One2oneUcChild1s matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the One2oneUcChild1s in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the One2oneUcChild1.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}