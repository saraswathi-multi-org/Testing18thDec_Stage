/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing18thdec_stage.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.hibernate.Hibernate;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing18thdec_stage.wmstudio.One2oneChild;
import com.testing18thdec_stage.wmstudio.One2oneUcChild;
import com.testing18thdec_stage.wmstudio.One2oneUcChild1;


/**
 * ServiceImpl object for domain model class One2oneUcChild.
 *
 * @see One2oneUcChild
 */
@Service("WMSTUDIO.One2oneUcChildService")
@Validated
@EntityService(entityClass = One2oneUcChild.class, serviceId = "WMSTUDIO")
public class One2oneUcChildServiceImpl implements One2oneUcChildService {

    private static final Logger LOGGER = LoggerFactory.getLogger(One2oneUcChildServiceImpl.class);


    @Autowired
    @Qualifier("WMSTUDIO.One2oneUcChildDao")
    private WMGenericDao<One2oneUcChild, String> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<One2oneUcChild, String> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
    public One2oneUcChild create(One2oneUcChild one2oneUcChild) {
        LOGGER.debug("Creating a new One2oneUcChild with information: {}", one2oneUcChild);

        One2oneUcChild1 one2oneUcChild1 = one2oneUcChild.getOne2oneUcChild1();
        if(one2oneUcChild1 != null && Hibernate.isInitialized(one2oneUcChild1)) {
            one2oneUcChild1.setOne2oneUcChild(one2oneUcChild);
        }

        One2oneUcChild one2oneUcChildCreated = this.wmGenericDao.create(one2oneUcChild);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(one2oneUcChildCreated);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public One2oneUcChild getById(String one2oneucchildId) {
        LOGGER.debug("Finding One2oneUcChild by id: {}", one2oneucchildId);
        return this.wmGenericDao.findById(one2oneucchildId);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public One2oneUcChild findById(String one2oneucchildId) {
        LOGGER.debug("Finding One2oneUcChild by id: {}", one2oneucchildId);
        try {
            return this.wmGenericDao.findById(one2oneucchildId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No One2oneUcChild found with id: {}", one2oneucchildId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public List<One2oneUcChild> findByMultipleIds(List<String> one2oneucchildIds, boolean orderedReturn) {
        LOGGER.debug("Finding One2oneUcChilds by ids: {}", one2oneucchildIds);

        return this.wmGenericDao.findByMultipleIds(one2oneucchildIds, orderedReturn);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public One2oneUcChild getByByteCol(Byte byteCol) {
        Map<String, Object> byteColMap = new HashMap<>();
        byteColMap.put("byteCol", byteCol);

        LOGGER.debug("Finding One2oneUcChild by unique keys: {}", byteColMap);
        return this.wmGenericDao.findByUniqueKey(byteColMap);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "WMSTUDIOTransactionManager")
    @Override
    public One2oneUcChild update(One2oneUcChild one2oneUcChild) {
        LOGGER.debug("Updating One2oneUcChild with information: {}", one2oneUcChild);

        One2oneUcChild1 one2oneUcChild1 = one2oneUcChild.getOne2oneUcChild1();
        if(one2oneUcChild1 != null && Hibernate.isInitialized(one2oneUcChild1)) {
            one2oneUcChild1.setOne2oneUcChild(one2oneUcChild);
        }

        this.wmGenericDao.update(one2oneUcChild);
        this.wmGenericDao.refresh(one2oneUcChild);

        return one2oneUcChild;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
    public One2oneUcChild partialUpdate(String one2oneucchildId, Map<String, Object>one2oneUcChildPatch) {
        LOGGER.debug("Partially Updating the One2oneUcChild with id: {}", one2oneucchildId);

        One2oneUcChild one2oneUcChild = getById(one2oneucchildId);

        try {
            ObjectReader one2oneUcChildReader = this.objectMapper.reader().forType(One2oneUcChild.class).withValueToUpdate(one2oneUcChild);
            one2oneUcChild = one2oneUcChildReader.readValue(this.objectMapper.writeValueAsString(one2oneUcChildPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", one2oneUcChildPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        one2oneUcChild = update(one2oneUcChild);

        return one2oneUcChild;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
    public One2oneUcChild delete(String one2oneucchildId) {
        LOGGER.debug("Deleting One2oneUcChild with id: {}", one2oneucchildId);
        One2oneUcChild deleted = this.wmGenericDao.findById(one2oneucchildId);
        if (deleted == null) {
            LOGGER.debug("No One2oneUcChild found with id: {}", one2oneucchildId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), One2oneUcChild.class.getSimpleName(), one2oneucchildId);
        }
        // Removing references from parent Entities
        One2oneChild one2oneChildEntity = deleted.getOne2oneChild();
        if(one2oneChildEntity!=null) {
            one2oneChildEntity.setOne2oneUcChild(null);
        }

        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
    public void delete(One2oneUcChild one2oneUcChild) {
        LOGGER.debug("Deleting One2oneUcChild with {}", one2oneUcChild);
        this.wmGenericDao.delete(one2oneUcChild);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<One2oneUcChild> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all One2oneUcChilds");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<One2oneUcChild> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all One2oneUcChilds");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service WMSTUDIO for table One2oneUcChild to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service WMSTUDIO for table One2oneUcChild to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}