/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing18thdec_stage.newtestdb;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.math.BigDecimal;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.OneToOne;
import javax.persistence.Table;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

/**
 * One2oneChild generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`One2One_Child`")
public class One2oneChild implements Serializable {

    private Short pkId;
    private Short byteCol;
    private String stringCol;
    private BigDecimal doubleCol;
    private BigDecimal bigdecCol;
    private One2oneParent one2oneParent;

    @Id
    @Column(name = "`PK ID`", nullable = false, scale = 0, precision = 5)
    public Short getPkId() {
        return this.pkId;
    }

    public void setPkId(Short pkId) {
        this.pkId = pkId;
    }

    @Column(name = "`BYTE COL`", nullable = true, scale = 0, precision = 3)
    public Short getByteCol() {
        return this.byteCol;
    }

    public void setByteCol(Short byteCol) {
        this.byteCol = byteCol;
    }

    @Column(name = "`STRING COL`", nullable = true, length = 255)
    public String getStringCol() {
        return this.stringCol;
    }

    public void setStringCol(String stringCol) {
        this.stringCol = stringCol;
    }

    @Column(name = "`DOUBLE COL`", nullable = true, scale = 8, precision = 18)
    public BigDecimal getDoubleCol() {
        return this.doubleCol;
    }

    public void setDoubleCol(BigDecimal doubleCol) {
        this.doubleCol = doubleCol;
    }

    @Column(name = "`BIGDEC COL`", nullable = true, scale = 15, precision = 35)
    public BigDecimal getBigdecCol() {
        return this.bigdecCol;
    }

    public void setBigdecCol(BigDecimal bigdecCol) {
        this.bigdecCol = bigdecCol;
    }

    @OneToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`PK ID`", referencedColumnName = "`SHORT PK ID`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FK_One2One_Child_TO_One2LdB4c`"))
    @Fetch(FetchMode.JOIN)
    public One2oneParent getOne2oneParent() {
        return this.one2oneParent;
    }

    public void setOne2oneParent(One2oneParent one2oneParent) {
        if(one2oneParent != null) {
            this.pkId = one2oneParent.getShortPkId();
        }

        this.one2oneParent = one2oneParent;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof One2oneChild)) return false;
        final One2oneChild one2oneChild = (One2oneChild) o;
        return Objects.equals(getPkId(), one2oneChild.getPkId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getPkId());
    }
}