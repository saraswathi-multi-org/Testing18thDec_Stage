/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing18thdec_stage.newtestdb;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.sql.Timestamp;
import java.time.LocalDateTime;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.IdClass;
import javax.persistence.OneToOne;
import javax.persistence.Table;

import org.hibernate.annotations.Cascade;
import org.hibernate.annotations.CascadeType;

/**
 * One2oneCompParent generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`One2One_Comp_Parent`")
@IdClass(One2oneCompParentId.class)
public class One2oneCompParent implements Serializable {

    private String stringId;
    private Short byteId;
    private Double floatId;
    private String charId;
    private Timestamp timestampCol;
    private LocalDateTime datetimeCol;
    private One2oneCompChild one2oneCompChild;

    @Id
    @Column(name = "`STRING ID`", nullable = false, length = 20)
    public String getStringId() {
        return this.stringId;
    }

    public void setStringId(String stringId) {
        this.stringId = stringId;
    }

    @Id
    @Column(name = "`BYTE ID`", nullable = false, scale = 0, precision = 3)
    public Short getByteId() {
        return this.byteId;
    }

    public void setByteId(Short byteId) {
        this.byteId = byteId;
    }

    @Id
    @Column(name = "`FLOAT ID`", nullable = false, scale = 4, precision = 8)
    public Double getFloatId() {
        return this.floatId;
    }

    public void setFloatId(Double floatId) {
        this.floatId = floatId;
    }

    @Id
    @Column(name = "`CHAR ID`", nullable = false, length = 1)
    public String getCharId() {
        return this.charId;
    }

    public void setCharId(String charId) {
        this.charId = charId;
    }

    @Column(name = "`TIMESTAMP COL`", nullable = true)
    public Timestamp getTimestampCol() {
        return this.timestampCol;
    }

    public void setTimestampCol(Timestamp timestampCol) {
        this.timestampCol = timestampCol;
    }

    @Column(name = "`DATETIME COL`", nullable = true)
    public LocalDateTime getDatetimeCol() {
        return this.datetimeCol;
    }

    public void setDatetimeCol(LocalDateTime datetimeCol) {
        this.datetimeCol = datetimeCol;
    }

    @OneToOne(fetch = FetchType.LAZY, mappedBy = "one2oneCompParent")
    @Cascade({CascadeType.SAVE_UPDATE, CascadeType.REMOVE})
    public One2oneCompChild getOne2oneCompChild() {
        return this.one2oneCompChild;
    }

    public void setOne2oneCompChild(One2oneCompChild one2oneCompChild) {
        this.one2oneCompChild = one2oneCompChild;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof One2oneCompParent)) return false;
        final One2oneCompParent one2oneCompParent = (One2oneCompParent) o;
        return Objects.equals(getStringId(), one2oneCompParent.getStringId()) &&
                Objects.equals(getByteId(), one2oneCompParent.getByteId()) &&
                Objects.equals(getFloatId(), one2oneCompParent.getFloatId()) &&
                Objects.equals(getCharId(), one2oneCompParent.getCharId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getStringId(),
                getByteId(),
                getFloatId(),
                getCharId());
    }
}