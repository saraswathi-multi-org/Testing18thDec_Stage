/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing18thdec_stage.newtestdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testing18thdec_stage.newtestdb.Many2oneChild;
import com.testing18thdec_stage.newtestdb.Many2oneParent;
import com.testing18thdec_stage.newtestdb.service.Many2oneParentService;


/**
 * Controller object for domain model class Many2oneParent.
 * @see Many2oneParent
 */
@RestController("NewTestDB.Many2oneParentController")
@Api(value = "Many2oneParentController", description = "Exposes APIs to work with Many2oneParent resource.")
@RequestMapping("/NewTestDB/Many2oneParent")
public class Many2oneParentController {

    private static final Logger LOGGER = LoggerFactory.getLogger(Many2oneParentController.class);

    @Autowired
	@Qualifier("NewTestDB.Many2oneParentService")
	private Many2oneParentService many2oneParentService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new Many2oneParent instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Many2oneParent createMany2oneParent(@RequestBody Many2oneParent many2oneParent) {
		LOGGER.debug("Create Many2oneParent with information: {}" , many2oneParent);

		many2oneParent = many2oneParentService.create(many2oneParent);
		LOGGER.debug("Created Many2oneParent with information: {}" , many2oneParent);

	    return many2oneParent;
	}

    @ApiOperation(value = "Returns the Many2oneParent instance associated with the given id.")
    @RequestMapping(value = "/{stringId:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Many2oneParent getMany2oneParent(@PathVariable("stringId") String stringId) {
        LOGGER.debug("Getting Many2oneParent with id: {}" , stringId);

        Many2oneParent foundMany2oneParent = many2oneParentService.getById(stringId);
        LOGGER.debug("Many2oneParent details with id: {}" , foundMany2oneParent);

        return foundMany2oneParent;
    }

    @ApiOperation(value = "Updates the Many2oneParent instance associated with the given id.")
    @RequestMapping(value = "/{stringId:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Many2oneParent editMany2oneParent(@PathVariable("stringId") String stringId, @RequestBody Many2oneParent many2oneParent) {
        LOGGER.debug("Editing Many2oneParent with id: {}" , many2oneParent.getStringId());

        many2oneParent.setStringId(stringId);
        many2oneParent = many2oneParentService.update(many2oneParent);
        LOGGER.debug("Many2oneParent details with id: {}" , many2oneParent);

        return many2oneParent;
    }
    
    @ApiOperation(value = "Partially updates the Many2oneParent instance associated with the given id.")
    @RequestMapping(value = "/{stringId:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Many2oneParent patchMany2oneParent(@PathVariable("stringId") String stringId, @RequestBody @MapTo(Many2oneParent.class) Map<String, Object> many2oneParentPatch) {
        LOGGER.debug("Partially updating Many2oneParent with id: {}" , stringId);

        Many2oneParent many2oneParent = many2oneParentService.partialUpdate(stringId, many2oneParentPatch);
        LOGGER.debug("Many2oneParent details after partial update: {}" , many2oneParent);

        return many2oneParent;
    }

    @ApiOperation(value = "Deletes the Many2oneParent instance associated with the given id.")
    @RequestMapping(value = "/{stringId:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteMany2oneParent(@PathVariable("stringId") String stringId) {
        LOGGER.debug("Deleting Many2oneParent with id: {}" , stringId);

        Many2oneParent deletedMany2oneParent = many2oneParentService.delete(stringId);

        return deletedMany2oneParent != null;
    }

    /**
     * @deprecated Use {@link #findMany2oneParents(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Many2oneParent instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Many2oneParent> searchMany2oneParentsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Many2oneParents list by query filter:{}", (Object) queryFilters);
        return many2oneParentService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Many2oneParent instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Many2oneParent> findMany2oneParents(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Many2oneParents list by filter:", query);
        return many2oneParentService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Many2oneParent instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Many2oneParent> filterMany2oneParents(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Many2oneParents list by filter", query);
        return many2oneParentService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportMany2oneParents(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return many2oneParentService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportMany2oneParentsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = Many2oneParent.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> many2oneParentService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of Many2oneParent instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countMany2oneParents( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Many2oneParents");
		return many2oneParentService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getMany2oneParentAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return many2oneParentService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{stringId:.+}/many2oneChilds", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the many2oneChilds instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Many2oneChild> findAssociatedMany2oneChilds(@PathVariable("stringId") String stringId, Pageable pageable) {

        LOGGER.debug("Fetching all associated many2oneChilds");
        return many2oneParentService.findAssociatedMany2oneChilds(stringId, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Many2oneParentService instance
	 */
	protected void setMany2oneParentService(Many2oneParentService service) {
		this.many2oneParentService = service;
	}

}