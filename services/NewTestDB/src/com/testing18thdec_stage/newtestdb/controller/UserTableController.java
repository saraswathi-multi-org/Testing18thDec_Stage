/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing18thdec_stage.newtestdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testing18thdec_stage.newtestdb.UserTable;
import com.testing18thdec_stage.newtestdb.service.UserTableService;


/**
 * Controller object for domain model class UserTable.
 * @see UserTable
 */
@RestController("NewTestDB.UserTableController")
@Api(value = "UserTableController", description = "Exposes APIs to work with UserTable resource.")
@RequestMapping("/NewTestDB/UserTable")
public class UserTableController {

    private static final Logger LOGGER = LoggerFactory.getLogger(UserTableController.class);

    @Autowired
	@Qualifier("NewTestDB.UserTableService")
	private UserTableService userTableService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new UserTable instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public UserTable createUserTable(@RequestBody UserTable userTable) {
		LOGGER.debug("Create UserTable with information: {}" , userTable);

		userTable = userTableService.create(userTable);
		LOGGER.debug("Created UserTable with information: {}" , userTable);

	    return userTable;
	}

    @ApiOperation(value = "Returns the UserTable instance associated with the given id.")
    @RequestMapping(value = "/{userid:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public UserTable getUserTable(@PathVariable("userid") Integer userid) {
        LOGGER.debug("Getting UserTable with id: {}" , userid);

        UserTable foundUserTable = userTableService.getById(userid);
        LOGGER.debug("UserTable details with id: {}" , foundUserTable);

        return foundUserTable;
    }

    @ApiOperation(value = "Updates the UserTable instance associated with the given id.")
    @RequestMapping(value = "/{userid:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public UserTable editUserTable(@PathVariable("userid") Integer userid, @RequestBody UserTable userTable) {
        LOGGER.debug("Editing UserTable with id: {}" , userTable.getUserid());

        userTable.setUserid(userid);
        userTable = userTableService.update(userTable);
        LOGGER.debug("UserTable details with id: {}" , userTable);

        return userTable;
    }
    
    @ApiOperation(value = "Partially updates the UserTable instance associated with the given id.")
    @RequestMapping(value = "/{userid:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public UserTable patchUserTable(@PathVariable("userid") Integer userid, @RequestBody @MapTo(UserTable.class) Map<String, Object> userTablePatch) {
        LOGGER.debug("Partially updating UserTable with id: {}" , userid);

        UserTable userTable = userTableService.partialUpdate(userid, userTablePatch);
        LOGGER.debug("UserTable details after partial update: {}" , userTable);

        return userTable;
    }

    @ApiOperation(value = "Deletes the UserTable instance associated with the given id.")
    @RequestMapping(value = "/{userid:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteUserTable(@PathVariable("userid") Integer userid) {
        LOGGER.debug("Deleting UserTable with id: {}" , userid);

        UserTable deletedUserTable = userTableService.delete(userid);

        return deletedUserTable != null;
    }

    /**
     * @deprecated Use {@link #findUserTables(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of UserTable instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<UserTable> searchUserTablesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering UserTables list by query filter:{}", (Object) queryFilters);
        return userTableService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of UserTable instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<UserTable> findUserTables(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering UserTables list by filter:", query);
        return userTableService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of UserTable instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<UserTable> filterUserTables(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering UserTables list by filter", query);
        return userTableService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportUserTables(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return userTableService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportUserTablesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = UserTable.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> userTableService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of UserTable instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countUserTables( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting UserTables");
		return userTableService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getUserTableAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return userTableService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service UserTableService instance
	 */
	protected void setUserTableService(UserTableService service) {
		this.userTableService = service;
	}

}