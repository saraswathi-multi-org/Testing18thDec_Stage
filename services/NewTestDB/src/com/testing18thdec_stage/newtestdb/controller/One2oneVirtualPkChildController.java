/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing18thdec_stage.newtestdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testing18thdec_stage.newtestdb.One2oneVirtualPkChild;
import com.testing18thdec_stage.newtestdb.One2oneVirtualPkChildId;
import com.testing18thdec_stage.newtestdb.service.One2oneVirtualPkChildService;


/**
 * Controller object for domain model class One2oneVirtualPkChild.
 * @see One2oneVirtualPkChild
 */
@RestController("NewTestDB.One2oneVirtualPkChildController")
@Api(value = "One2oneVirtualPkChildController", description = "Exposes APIs to work with One2oneVirtualPkChild resource.")
@RequestMapping("/NewTestDB/One2oneVirtualPkChild")
public class One2oneVirtualPkChildController {

    private static final Logger LOGGER = LoggerFactory.getLogger(One2oneVirtualPkChildController.class);

    @Autowired
	@Qualifier("NewTestDB.One2oneVirtualPkChildService")
	private One2oneVirtualPkChildService one2oneVirtualPkChildService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new One2oneVirtualPkChild instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public One2oneVirtualPkChild createOne2oneVirtualPkChild(@RequestBody One2oneVirtualPkChild one2oneVirtualPkChild) {
		LOGGER.debug("Create One2oneVirtualPkChild with information: {}" , one2oneVirtualPkChild);

		one2oneVirtualPkChild = one2oneVirtualPkChildService.create(one2oneVirtualPkChild);
		LOGGER.debug("Created One2oneVirtualPkChild with information: {}" , one2oneVirtualPkChild);

	    return one2oneVirtualPkChild;
	}

    @ApiOperation(value = "Returns the One2oneVirtualPkChild instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public One2oneVirtualPkChild getOne2oneVirtualPkChild(@RequestParam("charPkId") String charPkId, @RequestParam("stringCol1") String stringCol1, @RequestParam("stringCol2") String stringCol2, @RequestParam("charCol") String charCol) {

        One2oneVirtualPkChildId one2onevirtualpkchildId = new One2oneVirtualPkChildId();
        one2onevirtualpkchildId.setCharPkId(charPkId);
        one2onevirtualpkchildId.setStringCol1(stringCol1);
        one2onevirtualpkchildId.setStringCol2(stringCol2);
        one2onevirtualpkchildId.setCharCol(charCol);

        LOGGER.debug("Getting One2oneVirtualPkChild with id: {}" , one2onevirtualpkchildId);
        One2oneVirtualPkChild one2oneVirtualPkChild = one2oneVirtualPkChildService.getById(one2onevirtualpkchildId);
        LOGGER.debug("One2oneVirtualPkChild details with id: {}" , one2oneVirtualPkChild);

        return one2oneVirtualPkChild;
    }



    @ApiOperation(value = "Updates the One2oneVirtualPkChild instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public One2oneVirtualPkChild editOne2oneVirtualPkChild(@RequestParam("charPkId") String charPkId, @RequestParam("stringCol1") String stringCol1, @RequestParam("stringCol2") String stringCol2, @RequestParam("charCol") String charCol, @RequestBody One2oneVirtualPkChild one2oneVirtualPkChild) {

        one2oneVirtualPkChild.setCharPkId(charPkId);
        one2oneVirtualPkChild.setStringCol1(stringCol1);
        one2oneVirtualPkChild.setStringCol2(stringCol2);
        one2oneVirtualPkChild.setCharCol(charCol);

        LOGGER.debug("One2oneVirtualPkChild details with id is updated with: {}" , one2oneVirtualPkChild);

        return one2oneVirtualPkChildService.update(one2oneVirtualPkChild);
    }

	@ApiOperation(value = "Partially updates the  One2oneVirtualPkChild instance associated with the given composite-id.")
	@RequestMapping(value = "/composite-id", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public One2oneVirtualPkChild patchOne2oneVirtualPkChild(@RequestParam("charPkId") String charPkId, @RequestParam("stringCol1") String stringCol1, @RequestParam("stringCol2") String stringCol2, @RequestParam("charCol") String charCol, @RequestBody @MapTo(One2oneVirtualPkChild.class) Map<String, Object> one2oneVirtualPkChildPatch) {

        One2oneVirtualPkChildId one2onevirtualpkchildId = new One2oneVirtualPkChildId();
        one2onevirtualpkchildId.setCharPkId(charPkId);
        one2onevirtualpkchildId.setStringCol1(stringCol1);
        one2onevirtualpkchildId.setStringCol2(stringCol2);
        one2onevirtualpkchildId.setCharCol(charCol);
        LOGGER.debug("Partially updating One2oneVirtualPkChild with id: {}" , one2onevirtualpkchildId);

        One2oneVirtualPkChild one2oneVirtualPkChild = one2oneVirtualPkChildService.partialUpdate(one2onevirtualpkchildId, one2oneVirtualPkChildPatch);
        LOGGER.debug("One2oneVirtualPkChild details after partial update: {}" , one2oneVirtualPkChild);

        return one2oneVirtualPkChild;
    }


    @ApiOperation(value = "Deletes the One2oneVirtualPkChild instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteOne2oneVirtualPkChild(@RequestParam("charPkId") String charPkId, @RequestParam("stringCol1") String stringCol1, @RequestParam("stringCol2") String stringCol2, @RequestParam("charCol") String charCol) {

        One2oneVirtualPkChildId one2onevirtualpkchildId = new One2oneVirtualPkChildId();
        one2onevirtualpkchildId.setCharPkId(charPkId);
        one2onevirtualpkchildId.setStringCol1(stringCol1);
        one2onevirtualpkchildId.setStringCol2(stringCol2);
        one2onevirtualpkchildId.setCharCol(charCol);

        LOGGER.debug("Deleting One2oneVirtualPkChild with id: {}" , one2onevirtualpkchildId);
        One2oneVirtualPkChild one2oneVirtualPkChild = one2oneVirtualPkChildService.delete(one2onevirtualpkchildId);

        return one2oneVirtualPkChild != null;
    }


    /**
     * @deprecated Use {@link #findOne2oneVirtualPkChilds(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of One2oneVirtualPkChild instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<One2oneVirtualPkChild> searchOne2oneVirtualPkChildsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering One2oneVirtualPkChilds list by query filter:{}", (Object) queryFilters);
        return one2oneVirtualPkChildService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of One2oneVirtualPkChild instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<One2oneVirtualPkChild> findOne2oneVirtualPkChilds(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering One2oneVirtualPkChilds list by filter:", query);
        return one2oneVirtualPkChildService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of One2oneVirtualPkChild instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<One2oneVirtualPkChild> filterOne2oneVirtualPkChilds(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering One2oneVirtualPkChilds list by filter", query);
        return one2oneVirtualPkChildService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportOne2oneVirtualPkChilds(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return one2oneVirtualPkChildService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportOne2oneVirtualPkChildsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = One2oneVirtualPkChild.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> one2oneVirtualPkChildService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of One2oneVirtualPkChild instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countOne2oneVirtualPkChilds( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting One2oneVirtualPkChilds");
		return one2oneVirtualPkChildService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getOne2oneVirtualPkChildAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return one2oneVirtualPkChildService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service One2oneVirtualPkChildService instance
	 */
	protected void setOne2oneVirtualPkChildService(One2oneVirtualPkChildService service) {
		this.one2oneVirtualPkChildService = service;
	}

}