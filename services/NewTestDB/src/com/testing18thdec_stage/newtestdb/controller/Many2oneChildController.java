/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing18thdec_stage.newtestdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testing18thdec_stage.newtestdb.Many2oneChild;
import com.testing18thdec_stage.newtestdb.service.Many2oneChildService;


/**
 * Controller object for domain model class Many2oneChild.
 * @see Many2oneChild
 */
@RestController("NewTestDB.Many2oneChildController")
@Api(value = "Many2oneChildController", description = "Exposes APIs to work with Many2oneChild resource.")
@RequestMapping("/NewTestDB/Many2oneChild")
public class Many2oneChildController {

    private static final Logger LOGGER = LoggerFactory.getLogger(Many2oneChildController.class);

    @Autowired
	@Qualifier("NewTestDB.Many2oneChildService")
	private Many2oneChildService many2oneChildService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new Many2oneChild instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Many2oneChild createMany2oneChild(@RequestBody Many2oneChild many2oneChild) {
		LOGGER.debug("Create Many2oneChild with information: {}" , many2oneChild);

		many2oneChild = many2oneChildService.create(many2oneChild);
		LOGGER.debug("Created Many2oneChild with information: {}" , many2oneChild);

	    return many2oneChild;
	}

    @ApiOperation(value = "Returns the Many2oneChild instance associated with the given id.")
    @RequestMapping(value = "/{byteid:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Many2oneChild getMany2oneChild(@PathVariable("byteid") Integer byteid) {
        LOGGER.debug("Getting Many2oneChild with id: {}" , byteid);

        Many2oneChild foundMany2oneChild = many2oneChildService.getById(byteid);
        LOGGER.debug("Many2oneChild details with id: {}" , foundMany2oneChild);

        return foundMany2oneChild;
    }

    @ApiOperation(value = "Updates the Many2oneChild instance associated with the given id.")
    @RequestMapping(value = "/{byteid:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Many2oneChild editMany2oneChild(@PathVariable("byteid") Integer byteid, @RequestBody Many2oneChild many2oneChild) {
        LOGGER.debug("Editing Many2oneChild with id: {}" , many2oneChild.getByteid());

        many2oneChild.setByteid(byteid);
        many2oneChild = many2oneChildService.update(many2oneChild);
        LOGGER.debug("Many2oneChild details with id: {}" , many2oneChild);

        return many2oneChild;
    }
    
    @ApiOperation(value = "Partially updates the Many2oneChild instance associated with the given id.")
    @RequestMapping(value = "/{byteid:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Many2oneChild patchMany2oneChild(@PathVariable("byteid") Integer byteid, @RequestBody @MapTo(Many2oneChild.class) Map<String, Object> many2oneChildPatch) {
        LOGGER.debug("Partially updating Many2oneChild with id: {}" , byteid);

        Many2oneChild many2oneChild = many2oneChildService.partialUpdate(byteid, many2oneChildPatch);
        LOGGER.debug("Many2oneChild details after partial update: {}" , many2oneChild);

        return many2oneChild;
    }

    @ApiOperation(value = "Deletes the Many2oneChild instance associated with the given id.")
    @RequestMapping(value = "/{byteid:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteMany2oneChild(@PathVariable("byteid") Integer byteid) {
        LOGGER.debug("Deleting Many2oneChild with id: {}" , byteid);

        Many2oneChild deletedMany2oneChild = many2oneChildService.delete(byteid);

        return deletedMany2oneChild != null;
    }

    /**
     * @deprecated Use {@link #findMany2oneChilds(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Many2oneChild instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Many2oneChild> searchMany2oneChildsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Many2oneChilds list by query filter:{}", (Object) queryFilters);
        return many2oneChildService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Many2oneChild instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Many2oneChild> findMany2oneChilds(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Many2oneChilds list by filter:", query);
        return many2oneChildService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Many2oneChild instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Many2oneChild> filterMany2oneChilds(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Many2oneChilds list by filter", query);
        return many2oneChildService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportMany2oneChilds(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return many2oneChildService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportMany2oneChildsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = Many2oneChild.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> many2oneChildService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of Many2oneChild instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countMany2oneChilds( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Many2oneChilds");
		return many2oneChildService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getMany2oneChildAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return many2oneChildService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Many2oneChildService instance
	 */
	protected void setMany2oneChildService(Many2oneChildService service) {
		this.many2oneChildService = service;
	}

}