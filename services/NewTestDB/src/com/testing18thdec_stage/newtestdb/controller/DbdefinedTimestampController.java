/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing18thdec_stage.newtestdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.sql.Timestamp;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testing18thdec_stage.newtestdb.DbdefinedTimestamp;
import com.testing18thdec_stage.newtestdb.DbdefinedTimestampId;
import com.testing18thdec_stage.newtestdb.service.DbdefinedTimestampService;


/**
 * Controller object for domain model class DbdefinedTimestamp.
 * @see DbdefinedTimestamp
 */
@RestController("NewTestDB.DbdefinedTimestampController")
@Api(value = "DbdefinedTimestampController", description = "Exposes APIs to work with DbdefinedTimestamp resource.")
@RequestMapping("/NewTestDB/DbdefinedTimestamp")
public class DbdefinedTimestampController {

    private static final Logger LOGGER = LoggerFactory.getLogger(DbdefinedTimestampController.class);

    @Autowired
	@Qualifier("NewTestDB.DbdefinedTimestampService")
	private DbdefinedTimestampService dbdefinedTimestampService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new DbdefinedTimestamp instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DbdefinedTimestamp createDbdefinedTimestamp(@RequestBody DbdefinedTimestamp dbdefinedTimestamp) {
		LOGGER.debug("Create DbdefinedTimestamp with information: {}" , dbdefinedTimestamp);

		dbdefinedTimestamp = dbdefinedTimestampService.create(dbdefinedTimestamp);
		LOGGER.debug("Created DbdefinedTimestamp with information: {}" , dbdefinedTimestamp);

	    return dbdefinedTimestamp;
	}

    @ApiOperation(value = "Returns the DbdefinedTimestamp instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DbdefinedTimestamp getDbdefinedTimestamp(@RequestParam("id") Integer id, @RequestParam("ts") Timestamp ts, @RequestParam("column3") String column3) {

        DbdefinedTimestampId dbdefinedtimestampId = new DbdefinedTimestampId();
        dbdefinedtimestampId.setId(id);
        dbdefinedtimestampId.setTs(ts);
        dbdefinedtimestampId.setColumn3(column3);

        LOGGER.debug("Getting DbdefinedTimestamp with id: {}" , dbdefinedtimestampId);
        DbdefinedTimestamp dbdefinedTimestamp = dbdefinedTimestampService.getById(dbdefinedtimestampId);
        LOGGER.debug("DbdefinedTimestamp details with id: {}" , dbdefinedTimestamp);

        return dbdefinedTimestamp;
    }



    @ApiOperation(value = "Updates the DbdefinedTimestamp instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DbdefinedTimestamp editDbdefinedTimestamp(@RequestParam("id") Integer id, @RequestParam("ts") Timestamp ts, @RequestParam("column3") String column3, @RequestBody DbdefinedTimestamp dbdefinedTimestamp) {

        dbdefinedTimestamp.setId(id);
        dbdefinedTimestamp.setTs(ts);
        dbdefinedTimestamp.setColumn3(column3);

        LOGGER.debug("DbdefinedTimestamp details with id is updated with: {}" , dbdefinedTimestamp);

        return dbdefinedTimestampService.update(dbdefinedTimestamp);
    }

	@ApiOperation(value = "Partially updates the  DbdefinedTimestamp instance associated with the given composite-id.")
	@RequestMapping(value = "/composite-id", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DbdefinedTimestamp patchDbdefinedTimestamp(@RequestParam("id") Integer id, @RequestParam("ts") Timestamp ts, @RequestParam("column3") String column3, @RequestBody @MapTo(DbdefinedTimestamp.class) Map<String, Object> dbdefinedTimestampPatch) {

        DbdefinedTimestampId dbdefinedtimestampId = new DbdefinedTimestampId();
        dbdefinedtimestampId.setId(id);
        dbdefinedtimestampId.setTs(ts);
        dbdefinedtimestampId.setColumn3(column3);
        LOGGER.debug("Partially updating DbdefinedTimestamp with id: {}" , dbdefinedtimestampId);

        DbdefinedTimestamp dbdefinedTimestamp = dbdefinedTimestampService.partialUpdate(dbdefinedtimestampId, dbdefinedTimestampPatch);
        LOGGER.debug("DbdefinedTimestamp details after partial update: {}" , dbdefinedTimestamp);

        return dbdefinedTimestamp;
    }


    @ApiOperation(value = "Deletes the DbdefinedTimestamp instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteDbdefinedTimestamp(@RequestParam("id") Integer id, @RequestParam("ts") Timestamp ts, @RequestParam("column3") String column3) {

        DbdefinedTimestampId dbdefinedtimestampId = new DbdefinedTimestampId();
        dbdefinedtimestampId.setId(id);
        dbdefinedtimestampId.setTs(ts);
        dbdefinedtimestampId.setColumn3(column3);

        LOGGER.debug("Deleting DbdefinedTimestamp with id: {}" , dbdefinedtimestampId);
        DbdefinedTimestamp dbdefinedTimestamp = dbdefinedTimestampService.delete(dbdefinedtimestampId);

        return dbdefinedTimestamp != null;
    }


    /**
     * @deprecated Use {@link #findDbdefinedTimestamps(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of DbdefinedTimestamp instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<DbdefinedTimestamp> searchDbdefinedTimestampsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering DbdefinedTimestamps list by query filter:{}", (Object) queryFilters);
        return dbdefinedTimestampService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of DbdefinedTimestamp instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<DbdefinedTimestamp> findDbdefinedTimestamps(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering DbdefinedTimestamps list by filter:", query);
        return dbdefinedTimestampService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of DbdefinedTimestamp instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<DbdefinedTimestamp> filterDbdefinedTimestamps(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering DbdefinedTimestamps list by filter", query);
        return dbdefinedTimestampService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportDbdefinedTimestamps(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return dbdefinedTimestampService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportDbdefinedTimestampsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = DbdefinedTimestamp.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> dbdefinedTimestampService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of DbdefinedTimestamp instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countDbdefinedTimestamps( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting DbdefinedTimestamps");
		return dbdefinedTimestampService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getDbdefinedTimestampAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return dbdefinedTimestampService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service DbdefinedTimestampService instance
	 */
	protected void setDbdefinedTimestampService(DbdefinedTimestampService service) {
		this.dbdefinedTimestampService = service;
	}

}