/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing18thdec_stage.newtestdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.time.LocalDateTime;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.TypeMismatchException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testing18thdec_stage.newtestdb.DatabasedefinedTable;
import com.testing18thdec_stage.newtestdb.DatabasedefinedTableId;
import com.testing18thdec_stage.newtestdb.service.DatabasedefinedTableService;


/**
 * Controller object for domain model class DatabasedefinedTable.
 * @see DatabasedefinedTable
 */
@RestController("NewTestDB.DatabasedefinedTableController")
@Api(value = "DatabasedefinedTableController", description = "Exposes APIs to work with DatabasedefinedTable resource.")
@RequestMapping("/NewTestDB/DatabasedefinedTable")
public class DatabasedefinedTableController {

    private static final Logger LOGGER = LoggerFactory.getLogger(DatabasedefinedTableController.class);

    @Autowired
	@Qualifier("NewTestDB.DatabasedefinedTableService")
	private DatabasedefinedTableService databasedefinedTableService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new DatabasedefinedTable instance.")
    @RequestMapping(method = RequestMethod.POST, consumes = "multipart/form-data")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DatabasedefinedTable createDatabasedefinedTable(@RequestPart("wm_data_json") DatabasedefinedTable databasedefinedTable, @RequestPart(value = "x", required = false) MultipartFile _x) {
		LOGGER.debug("Create DatabasedefinedTable with information: {}" , databasedefinedTable);

    databasedefinedTable.setX(WMMultipartUtils.toByteArray(_x));
		databasedefinedTable = databasedefinedTableService.create(databasedefinedTable);
		LOGGER.debug("Created DatabasedefinedTable with information: {}" , databasedefinedTable);

	    return databasedefinedTable;
	}

    @ApiOperation(value = "Returns the DatabasedefinedTable instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DatabasedefinedTable getDatabasedefinedTable(@RequestParam("a") Integer a, @RequestParam("b") Integer b, @RequestParam("expires") LocalDateTime expires, @RequestParam("x") byte[] x, @RequestParam("column5") String column5) {

        DatabasedefinedTableId databasedefinedtableId = new DatabasedefinedTableId();
        databasedefinedtableId.setA(a);
        databasedefinedtableId.setB(b);
        databasedefinedtableId.setExpires(expires);
        databasedefinedtableId.setX(x);
        databasedefinedtableId.setColumn5(column5);

        LOGGER.debug("Getting DatabasedefinedTable with id: {}" , databasedefinedtableId);
        DatabasedefinedTable databasedefinedTable = databasedefinedTableService.getById(databasedefinedtableId);
        LOGGER.debug("DatabasedefinedTable details with id: {}" , databasedefinedTable);

        return databasedefinedTable;
    }

    @ApiOperation(value = "Retrieves content for the given BLOB field in DatabasedefinedTable instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id/content/{fieldName}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public void getDatabasedefinedTableBLOBContent(@RequestParam("a") Integer a, @RequestParam("b") Integer b, @RequestParam("expires") LocalDateTime expires, @RequestParam("x") byte[] x, @RequestParam("column5") String column5, @PathVariable("fieldName") String fieldName, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) {

        LOGGER.debug("Retrieves content for the given BLOB field {} in DatabasedefinedTable instance" , fieldName);

        if(!WMRuntimeUtils.isLob(DatabasedefinedTable.class, fieldName)) {
            throw new TypeMismatchException("Given field " + fieldName +  " is not a valid BLOB type");
        }

        DatabasedefinedTableId databasedefinedtableId = new DatabasedefinedTableId();
        databasedefinedtableId.setA(a);
        databasedefinedtableId.setB(b);
        databasedefinedtableId.setExpires(expires);
        databasedefinedtableId.setX(x);
        databasedefinedtableId.setColumn5(column5);

        DatabasedefinedTable databasedefinedTable = databasedefinedTableService.getById(databasedefinedtableId);
        WMMultipartUtils.buildHttpResponseForBlob(databasedefinedTable, fieldName, httpServletRequest, httpServletResponse);
    }



    @ApiOperation(value = "Updates the DatabasedefinedTable instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DatabasedefinedTable editDatabasedefinedTable(@RequestParam("a") Integer a, @RequestParam("b") Integer b, @RequestParam("expires") LocalDateTime expires, @RequestParam("x") byte[] x, @RequestParam("column5") String column5, @RequestBody DatabasedefinedTable databasedefinedTable) {

        databasedefinedTable.setA(a);
        databasedefinedTable.setB(b);
        databasedefinedTable.setExpires(expires);
        databasedefinedTable.setX(x);
        databasedefinedTable.setColumn5(column5);

        LOGGER.debug("DatabasedefinedTable details with id is updated with: {}" , databasedefinedTable);

        return databasedefinedTableService.update(databasedefinedTable);
    }

	@ApiOperation(value = "Partially updates the  DatabasedefinedTable instance associated with the given composite-id.")
	@RequestMapping(value = "/composite-id", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DatabasedefinedTable patchDatabasedefinedTable(@RequestParam("a") Integer a, @RequestParam("b") Integer b, @RequestParam("expires") LocalDateTime expires, @RequestParam("x") byte[] x, @RequestParam("column5") String column5, @RequestBody @MapTo(DatabasedefinedTable.class) Map<String, Object> databasedefinedTablePatch) {

        DatabasedefinedTableId databasedefinedtableId = new DatabasedefinedTableId();
        databasedefinedtableId.setA(a);
        databasedefinedtableId.setB(b);
        databasedefinedtableId.setExpires(expires);
        databasedefinedtableId.setX(x);
        databasedefinedtableId.setColumn5(column5);
        LOGGER.debug("Partially updating DatabasedefinedTable with id: {}" , databasedefinedtableId);

        DatabasedefinedTable databasedefinedTable = databasedefinedTableService.partialUpdate(databasedefinedtableId, databasedefinedTablePatch);
        LOGGER.debug("DatabasedefinedTable details after partial update: {}" , databasedefinedTable);

        return databasedefinedTable;
    }

    @ApiOperation(value = "Updates the DatabasedefinedTable instance associated with the given composite-id.This API should be used when DatabasedefinedTable instance fields that require multipart data.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.POST, consumes = "multipart/form-data")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DatabasedefinedTable editDatabasedefinedTable(@RequestParam("a") Integer a, @RequestParam("b") Integer b, @RequestParam("expires") LocalDateTime expires, @RequestParam("x") byte[] x, @RequestParam("column5") String column5, MultipartHttpServletRequest multipartHttpServletRequest) {
        return this.editDatabasedefinedTableAndMultiparts(a, b, expires, x, column5, multipartHttpServletRequest);
    }

    @ApiOperation(value = "Updates the DatabasedefinedTable instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT,  consumes = "multipart/form-data")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DatabasedefinedTable editDatabasedefinedTableAndMultiparts(@RequestParam("a") Integer a, @RequestParam("b") Integer b, @RequestParam("expires") LocalDateTime expires, @RequestParam("x") byte[] x, @RequestParam("column5") String column5, MultipartHttpServletRequest multipartHttpServletRequest) { 

        DatabasedefinedTableId databasedefinedtableId = new DatabasedefinedTableId();
        databasedefinedtableId.setA(a);
        databasedefinedtableId.setB(b);
        databasedefinedtableId.setExpires(expires);
        databasedefinedtableId.setX(x);
        databasedefinedtableId.setColumn5(column5);

        DatabasedefinedTable newDatabasedefinedTable = WMMultipartUtils.toObject(multipartHttpServletRequest, DatabasedefinedTable.class, "NewTestDB");
        DatabasedefinedTable oldDatabasedefinedTable = databasedefinedTableService.getById(databasedefinedtableId);

        WMMultipartUtils.updateLobsContent(oldDatabasedefinedTable, newDatabasedefinedTable);

        newDatabasedefinedTable.setA(a);
        newDatabasedefinedTable.setB(b);
        newDatabasedefinedTable.setExpires(expires);
        newDatabasedefinedTable.setX(x);
        newDatabasedefinedTable.setColumn5(column5);

        LOGGER.debug("DatabasedefinedTable details with id is updated with: {}" , newDatabasedefinedTable);

        return databasedefinedTableService.update(newDatabasedefinedTable);
    }


    @ApiOperation(value = "Deletes the DatabasedefinedTable instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteDatabasedefinedTable(@RequestParam("a") Integer a, @RequestParam("b") Integer b, @RequestParam("expires") LocalDateTime expires, @RequestParam("x") byte[] x, @RequestParam("column5") String column5) {

        DatabasedefinedTableId databasedefinedtableId = new DatabasedefinedTableId();
        databasedefinedtableId.setA(a);
        databasedefinedtableId.setB(b);
        databasedefinedtableId.setExpires(expires);
        databasedefinedtableId.setX(x);
        databasedefinedtableId.setColumn5(column5);

        LOGGER.debug("Deleting DatabasedefinedTable with id: {}" , databasedefinedtableId);
        DatabasedefinedTable databasedefinedTable = databasedefinedTableService.delete(databasedefinedtableId);

        return databasedefinedTable != null;
    }


    /**
     * @deprecated Use {@link #findDatabasedefinedTables(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of DatabasedefinedTable instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<DatabasedefinedTable> searchDatabasedefinedTablesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering DatabasedefinedTables list by query filter:{}", (Object) queryFilters);
        return databasedefinedTableService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of DatabasedefinedTable instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<DatabasedefinedTable> findDatabasedefinedTables(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering DatabasedefinedTables list by filter:", query);
        return databasedefinedTableService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of DatabasedefinedTable instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<DatabasedefinedTable> filterDatabasedefinedTables(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering DatabasedefinedTables list by filter", query);
        return databasedefinedTableService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportDatabasedefinedTables(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return databasedefinedTableService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportDatabasedefinedTablesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = DatabasedefinedTable.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> databasedefinedTableService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of DatabasedefinedTable instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countDatabasedefinedTables( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting DatabasedefinedTables");
		return databasedefinedTableService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getDatabasedefinedTableAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return databasedefinedTableService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service DatabasedefinedTableService instance
	 */
	protected void setDatabasedefinedTableService(DatabasedefinedTableService service) {
		this.databasedefinedTableService = service;
	}

}