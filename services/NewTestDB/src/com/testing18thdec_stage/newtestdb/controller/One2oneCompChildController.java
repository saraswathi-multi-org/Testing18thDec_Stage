/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing18thdec_stage.newtestdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testing18thdec_stage.newtestdb.One2oneCompChild;
import com.testing18thdec_stage.newtestdb.One2oneCompParentId;
import com.testing18thdec_stage.newtestdb.service.One2oneCompChildService;


/**
 * Controller object for domain model class One2oneCompChild.
 * @see One2oneCompChild
 */
@RestController("NewTestDB.One2oneCompChildController")
@Api(value = "One2oneCompChildController", description = "Exposes APIs to work with One2oneCompChild resource.")
@RequestMapping("/NewTestDB/One2oneCompChild")
public class One2oneCompChildController {

    private static final Logger LOGGER = LoggerFactory.getLogger(One2oneCompChildController.class);

    @Autowired
	@Qualifier("NewTestDB.One2oneCompChildService")
	private One2oneCompChildService one2oneCompChildService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new One2oneCompChild instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public One2oneCompChild createOne2oneCompChild(@RequestBody One2oneCompChild one2oneCompChild) {
		LOGGER.debug("Create One2oneCompChild with information: {}" , one2oneCompChild);

		one2oneCompChild = one2oneCompChildService.create(one2oneCompChild);
		LOGGER.debug("Created One2oneCompChild with information: {}" , one2oneCompChild);

	    return one2oneCompChild;
	}

    @ApiOperation(value = "Returns the One2oneCompChild instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public One2oneCompChild getOne2oneCompChild(@RequestParam("byteId") Short byteId, @RequestParam("floatId") Double floatId, @RequestParam("charId") String charId, @RequestParam("stringId") String stringId) {

        One2oneCompParentId one2onecompchildId = new One2oneCompParentId();
        one2onecompchildId.setByteId(byteId);
        one2onecompchildId.setFloatId(floatId);
        one2onecompchildId.setCharId(charId);
        one2onecompchildId.setStringId(stringId);

        LOGGER.debug("Getting One2oneCompChild with id: {}" , one2onecompchildId);
        One2oneCompChild one2oneCompChild = one2oneCompChildService.getById(one2onecompchildId);
        LOGGER.debug("One2oneCompChild details with id: {}" , one2oneCompChild);

        return one2oneCompChild;
    }



    @ApiOperation(value = "Updates the One2oneCompChild instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public One2oneCompChild editOne2oneCompChild(@RequestParam("byteId") Short byteId, @RequestParam("floatId") Double floatId, @RequestParam("charId") String charId, @RequestParam("stringId") String stringId, @RequestBody One2oneCompChild one2oneCompChild) {

        one2oneCompChild.setByteId(byteId);
        one2oneCompChild.setFloatId(floatId);
        one2oneCompChild.setCharId(charId);
        one2oneCompChild.setStringId(stringId);

        LOGGER.debug("One2oneCompChild details with id is updated with: {}" , one2oneCompChild);

        return one2oneCompChildService.update(one2oneCompChild);
    }

	@ApiOperation(value = "Partially updates the  One2oneCompChild instance associated with the given composite-id.")
	@RequestMapping(value = "/composite-id", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public One2oneCompChild patchOne2oneCompChild(@RequestParam("byteId") Short byteId, @RequestParam("floatId") Double floatId, @RequestParam("charId") String charId, @RequestParam("stringId") String stringId, @RequestBody @MapTo(One2oneCompChild.class) Map<String, Object> one2oneCompChildPatch) {

        One2oneCompParentId one2onecompchildId = new One2oneCompParentId();
        one2onecompchildId.setByteId(byteId);
        one2onecompchildId.setFloatId(floatId);
        one2onecompchildId.setCharId(charId);
        one2onecompchildId.setStringId(stringId);
        LOGGER.debug("Partially updating One2oneCompChild with id: {}" , one2onecompchildId);

        One2oneCompChild one2oneCompChild = one2oneCompChildService.partialUpdate(one2onecompchildId, one2oneCompChildPatch);
        LOGGER.debug("One2oneCompChild details after partial update: {}" , one2oneCompChild);

        return one2oneCompChild;
    }


    @ApiOperation(value = "Deletes the One2oneCompChild instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteOne2oneCompChild(@RequestParam("byteId") Short byteId, @RequestParam("floatId") Double floatId, @RequestParam("charId") String charId, @RequestParam("stringId") String stringId) {

        One2oneCompParentId one2onecompchildId = new One2oneCompParentId();
        one2onecompchildId.setByteId(byteId);
        one2onecompchildId.setFloatId(floatId);
        one2onecompchildId.setCharId(charId);
        one2onecompchildId.setStringId(stringId);

        LOGGER.debug("Deleting One2oneCompChild with id: {}" , one2onecompchildId);
        One2oneCompChild one2oneCompChild = one2oneCompChildService.delete(one2onecompchildId);

        return one2oneCompChild != null;
    }


    /**
     * @deprecated Use {@link #findOne2oneCompChilds(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of One2oneCompChild instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<One2oneCompChild> searchOne2oneCompChildsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering One2oneCompChilds list by query filter:{}", (Object) queryFilters);
        return one2oneCompChildService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of One2oneCompChild instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<One2oneCompChild> findOne2oneCompChilds(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering One2oneCompChilds list by filter:", query);
        return one2oneCompChildService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of One2oneCompChild instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<One2oneCompChild> filterOne2oneCompChilds(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering One2oneCompChilds list by filter", query);
        return one2oneCompChildService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportOne2oneCompChilds(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return one2oneCompChildService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportOne2oneCompChildsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = One2oneCompChild.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> one2oneCompChildService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of One2oneCompChild instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countOne2oneCompChilds( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting One2oneCompChilds");
		return one2oneCompChildService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getOne2oneCompChildAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return one2oneCompChildService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service One2oneCompChildService instance
	 */
	protected void setOne2oneCompChildService(One2oneCompChildService service) {
		this.one2oneCompChildService = service;
	}

}