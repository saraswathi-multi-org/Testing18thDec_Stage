/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing18thdec_stage.newtestdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testing18thdec_stage.newtestdb.Many2oneCompChild;
import com.testing18thdec_stage.newtestdb.service.Many2oneCompChildService;


/**
 * Controller object for domain model class Many2oneCompChild.
 * @see Many2oneCompChild
 */
@RestController("NewTestDB.Many2oneCompChildController")
@Api(value = "Many2oneCompChildController", description = "Exposes APIs to work with Many2oneCompChild resource.")
@RequestMapping("/NewTestDB/Many2oneCompChild")
public class Many2oneCompChildController {

    private static final Logger LOGGER = LoggerFactory.getLogger(Many2oneCompChildController.class);

    @Autowired
	@Qualifier("NewTestDB.Many2oneCompChildService")
	private Many2oneCompChildService many2oneCompChildService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new Many2oneCompChild instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Many2oneCompChild createMany2oneCompChild(@RequestBody Many2oneCompChild many2oneCompChild) {
		LOGGER.debug("Create Many2oneCompChild with information: {}" , many2oneCompChild);

		many2oneCompChild = many2oneCompChildService.create(many2oneCompChild);
		LOGGER.debug("Created Many2oneCompChild with information: {}" , many2oneCompChild);

	    return many2oneCompChild;
	}

    @ApiOperation(value = "Returns the Many2oneCompChild instance associated with the given id.")
    @RequestMapping(value = "/{shortId:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Many2oneCompChild getMany2oneCompChild(@PathVariable("shortId") Short shortId) {
        LOGGER.debug("Getting Many2oneCompChild with id: {}" , shortId);

        Many2oneCompChild foundMany2oneCompChild = many2oneCompChildService.getById(shortId);
        LOGGER.debug("Many2oneCompChild details with id: {}" , foundMany2oneCompChild);

        return foundMany2oneCompChild;
    }

    @ApiOperation(value = "Updates the Many2oneCompChild instance associated with the given id.")
    @RequestMapping(value = "/{shortId:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Many2oneCompChild editMany2oneCompChild(@PathVariable("shortId") Short shortId, @RequestBody Many2oneCompChild many2oneCompChild) {
        LOGGER.debug("Editing Many2oneCompChild with id: {}" , many2oneCompChild.getShortId());

        many2oneCompChild.setShortId(shortId);
        many2oneCompChild = many2oneCompChildService.update(many2oneCompChild);
        LOGGER.debug("Many2oneCompChild details with id: {}" , many2oneCompChild);

        return many2oneCompChild;
    }
    
    @ApiOperation(value = "Partially updates the Many2oneCompChild instance associated with the given id.")
    @RequestMapping(value = "/{shortId:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Many2oneCompChild patchMany2oneCompChild(@PathVariable("shortId") Short shortId, @RequestBody @MapTo(Many2oneCompChild.class) Map<String, Object> many2oneCompChildPatch) {
        LOGGER.debug("Partially updating Many2oneCompChild with id: {}" , shortId);

        Many2oneCompChild many2oneCompChild = many2oneCompChildService.partialUpdate(shortId, many2oneCompChildPatch);
        LOGGER.debug("Many2oneCompChild details after partial update: {}" , many2oneCompChild);

        return many2oneCompChild;
    }

    @ApiOperation(value = "Deletes the Many2oneCompChild instance associated with the given id.")
    @RequestMapping(value = "/{shortId:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteMany2oneCompChild(@PathVariable("shortId") Short shortId) {
        LOGGER.debug("Deleting Many2oneCompChild with id: {}" , shortId);

        Many2oneCompChild deletedMany2oneCompChild = many2oneCompChildService.delete(shortId);

        return deletedMany2oneCompChild != null;
    }

    /**
     * @deprecated Use {@link #findMany2oneCompChilds(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Many2oneCompChild instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Many2oneCompChild> searchMany2oneCompChildsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Many2oneCompChilds list by query filter:{}", (Object) queryFilters);
        return many2oneCompChildService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Many2oneCompChild instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Many2oneCompChild> findMany2oneCompChilds(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Many2oneCompChilds list by filter:", query);
        return many2oneCompChildService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Many2oneCompChild instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Many2oneCompChild> filterMany2oneCompChilds(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Many2oneCompChilds list by filter", query);
        return many2oneCompChildService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportMany2oneCompChilds(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return many2oneCompChildService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportMany2oneCompChildsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = Many2oneCompChild.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> many2oneCompChildService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of Many2oneCompChild instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countMany2oneCompChilds( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Many2oneCompChilds");
		return many2oneCompChildService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getMany2oneCompChildAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return many2oneCompChildService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Many2oneCompChildService instance
	 */
	protected void setMany2oneCompChildService(Many2oneCompChildService service) {
		this.many2oneCompChildService = service;
	}

}