/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing18thdec_stage.newtestdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing18thdec_stage.newtestdb.One2oneVirtualParent;


/**
 * ServiceImpl object for domain model class One2oneVirtualParent.
 *
 * @see One2oneVirtualParent
 */
@Service("NewTestDB.One2oneVirtualParentService")
@Validated
@EntityService(entityClass = One2oneVirtualParent.class, serviceId = "NewTestDB")
public class One2oneVirtualParentServiceImpl implements One2oneVirtualParentService {

    private static final Logger LOGGER = LoggerFactory.getLogger(One2oneVirtualParentServiceImpl.class);


    @Autowired
    @Qualifier("NewTestDB.One2oneVirtualParentDao")
    private WMGenericDao<One2oneVirtualParent, String> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<One2oneVirtualParent, String> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "NewTestDBTransactionManager")
    @Override
    public One2oneVirtualParent create(One2oneVirtualParent one2oneVirtualParent) {
        LOGGER.debug("Creating a new One2oneVirtualParent with information: {}", one2oneVirtualParent);

        One2oneVirtualParent one2oneVirtualParentCreated = this.wmGenericDao.create(one2oneVirtualParent);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(one2oneVirtualParentCreated);
    }

    @Transactional(readOnly = true, value = "NewTestDBTransactionManager")
    @Override
    public One2oneVirtualParent getById(String one2onevirtualparentId) {
        LOGGER.debug("Finding One2oneVirtualParent by id: {}", one2onevirtualparentId);
        return this.wmGenericDao.findById(one2onevirtualparentId);
    }

    @Transactional(readOnly = true, value = "NewTestDBTransactionManager")
    @Override
    public One2oneVirtualParent findById(String one2onevirtualparentId) {
        LOGGER.debug("Finding One2oneVirtualParent by id: {}", one2onevirtualparentId);
        try {
            return this.wmGenericDao.findById(one2onevirtualparentId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No One2oneVirtualParent found with id: {}", one2onevirtualparentId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "NewTestDBTransactionManager")
    @Override
    public List<One2oneVirtualParent> findByMultipleIds(List<String> one2onevirtualparentIds, boolean orderedReturn) {
        LOGGER.debug("Finding One2oneVirtualParents by ids: {}", one2onevirtualparentIds);

        return this.wmGenericDao.findByMultipleIds(one2onevirtualparentIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "NewTestDBTransactionManager")
    @Override
    public One2oneVirtualParent update(One2oneVirtualParent one2oneVirtualParent) {
        LOGGER.debug("Updating One2oneVirtualParent with information: {}", one2oneVirtualParent);

        this.wmGenericDao.update(one2oneVirtualParent);
        this.wmGenericDao.refresh(one2oneVirtualParent);

        return one2oneVirtualParent;
    }

    @Transactional(value = "NewTestDBTransactionManager")
    @Override
    public One2oneVirtualParent partialUpdate(String one2onevirtualparentId, Map<String, Object>one2oneVirtualParentPatch) {
        LOGGER.debug("Partially Updating the One2oneVirtualParent with id: {}", one2onevirtualparentId);

        One2oneVirtualParent one2oneVirtualParent = getById(one2onevirtualparentId);

        try {
            ObjectReader one2oneVirtualParentReader = this.objectMapper.reader().forType(One2oneVirtualParent.class).withValueToUpdate(one2oneVirtualParent);
            one2oneVirtualParent = one2oneVirtualParentReader.readValue(this.objectMapper.writeValueAsString(one2oneVirtualParentPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", one2oneVirtualParentPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        one2oneVirtualParent = update(one2oneVirtualParent);

        return one2oneVirtualParent;
    }

    @Transactional(value = "NewTestDBTransactionManager")
    @Override
    public One2oneVirtualParent delete(String one2onevirtualparentId) {
        LOGGER.debug("Deleting One2oneVirtualParent with id: {}", one2onevirtualparentId);
        One2oneVirtualParent deleted = this.wmGenericDao.findById(one2onevirtualparentId);
        if (deleted == null) {
            LOGGER.debug("No One2oneVirtualParent found with id: {}", one2onevirtualparentId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), One2oneVirtualParent.class.getSimpleName(), one2onevirtualparentId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "NewTestDBTransactionManager")
    @Override
    public void delete(One2oneVirtualParent one2oneVirtualParent) {
        LOGGER.debug("Deleting One2oneVirtualParent with {}", one2oneVirtualParent);
        this.wmGenericDao.delete(one2oneVirtualParent);
    }

    @Transactional(readOnly = true, value = "NewTestDBTransactionManager")
    @Override
    public Page<One2oneVirtualParent> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all One2oneVirtualParents");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "NewTestDBTransactionManager")
    @Override
    public Page<One2oneVirtualParent> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all One2oneVirtualParents");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "NewTestDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service NewTestDB for table One2oneVirtualParent to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "NewTestDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service NewTestDB for table One2oneVirtualParent to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "NewTestDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "NewTestDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}