/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing18thdec_stage.newtestdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing18thdec_stage.newtestdb.Many2oneChild;


/**
 * ServiceImpl object for domain model class Many2oneChild.
 *
 * @see Many2oneChild
 */
@Service("NewTestDB.Many2oneChildService")
@Validated
@EntityService(entityClass = Many2oneChild.class, serviceId = "NewTestDB")
public class Many2oneChildServiceImpl implements Many2oneChildService {

    private static final Logger LOGGER = LoggerFactory.getLogger(Many2oneChildServiceImpl.class);


    @Autowired
    @Qualifier("NewTestDB.Many2oneChildDao")
    private WMGenericDao<Many2oneChild, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<Many2oneChild, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "NewTestDBTransactionManager")
    @Override
    public Many2oneChild create(Many2oneChild many2oneChild) {
        LOGGER.debug("Creating a new Many2oneChild with information: {}", many2oneChild);

        Many2oneChild many2oneChildCreated = this.wmGenericDao.create(many2oneChild);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(many2oneChildCreated);
    }

    @Transactional(readOnly = true, value = "NewTestDBTransactionManager")
    @Override
    public Many2oneChild getById(Integer many2onechildId) {
        LOGGER.debug("Finding Many2oneChild by id: {}", many2onechildId);
        return this.wmGenericDao.findById(many2onechildId);
    }

    @Transactional(readOnly = true, value = "NewTestDBTransactionManager")
    @Override
    public Many2oneChild findById(Integer many2onechildId) {
        LOGGER.debug("Finding Many2oneChild by id: {}", many2onechildId);
        try {
            return this.wmGenericDao.findById(many2onechildId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Many2oneChild found with id: {}", many2onechildId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "NewTestDBTransactionManager")
    @Override
    public List<Many2oneChild> findByMultipleIds(List<Integer> many2onechildIds, boolean orderedReturn) {
        LOGGER.debug("Finding Many2oneChilds by ids: {}", many2onechildIds);

        return this.wmGenericDao.findByMultipleIds(many2onechildIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "NewTestDBTransactionManager")
    @Override
    public Many2oneChild update(Many2oneChild many2oneChild) {
        LOGGER.debug("Updating Many2oneChild with information: {}", many2oneChild);

        this.wmGenericDao.update(many2oneChild);
        this.wmGenericDao.refresh(many2oneChild);

        return many2oneChild;
    }

    @Transactional(value = "NewTestDBTransactionManager")
    @Override
    public Many2oneChild partialUpdate(Integer many2onechildId, Map<String, Object>many2oneChildPatch) {
        LOGGER.debug("Partially Updating the Many2oneChild with id: {}", many2onechildId);

        Many2oneChild many2oneChild = getById(many2onechildId);

        try {
            ObjectReader many2oneChildReader = this.objectMapper.reader().forType(Many2oneChild.class).withValueToUpdate(many2oneChild);
            many2oneChild = many2oneChildReader.readValue(this.objectMapper.writeValueAsString(many2oneChildPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", many2oneChildPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        many2oneChild = update(many2oneChild);

        return many2oneChild;
    }

    @Transactional(value = "NewTestDBTransactionManager")
    @Override
    public Many2oneChild delete(Integer many2onechildId) {
        LOGGER.debug("Deleting Many2oneChild with id: {}", many2onechildId);
        Many2oneChild deleted = this.wmGenericDao.findById(many2onechildId);
        if (deleted == null) {
            LOGGER.debug("No Many2oneChild found with id: {}", many2onechildId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Many2oneChild.class.getSimpleName(), many2onechildId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "NewTestDBTransactionManager")
    @Override
    public void delete(Many2oneChild many2oneChild) {
        LOGGER.debug("Deleting Many2oneChild with {}", many2oneChild);
        this.wmGenericDao.delete(many2oneChild);
    }

    @Transactional(readOnly = true, value = "NewTestDBTransactionManager")
    @Override
    public Page<Many2oneChild> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Many2oneChilds");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "NewTestDBTransactionManager")
    @Override
    public Page<Many2oneChild> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Many2oneChilds");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "NewTestDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service NewTestDB for table Many2oneChild to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "NewTestDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service NewTestDB for table Many2oneChild to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "NewTestDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "NewTestDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}