/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing18thdec_stage.newtestdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.hibernate.Hibernate;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing18thdec_stage.newtestdb.One2oneCompChild;
import com.testing18thdec_stage.newtestdb.One2oneCompParent;
import com.testing18thdec_stage.newtestdb.One2oneCompParentId;


/**
 * ServiceImpl object for domain model class One2oneCompParent.
 *
 * @see One2oneCompParent
 */
@Service("NewTestDB.One2oneCompParentService")
@Validated
@EntityService(entityClass = One2oneCompParent.class, serviceId = "NewTestDB")
public class One2oneCompParentServiceImpl implements One2oneCompParentService {

    private static final Logger LOGGER = LoggerFactory.getLogger(One2oneCompParentServiceImpl.class);


    @Autowired
    @Qualifier("NewTestDB.One2oneCompParentDao")
    private WMGenericDao<One2oneCompParent, One2oneCompParentId> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<One2oneCompParent, One2oneCompParentId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "NewTestDBTransactionManager")
    @Override
    public One2oneCompParent create(One2oneCompParent one2oneCompParent) {
        LOGGER.debug("Creating a new One2oneCompParent with information: {}", one2oneCompParent);

        One2oneCompChild one2oneCompChild = one2oneCompParent.getOne2oneCompChild();
        if(one2oneCompChild != null && Hibernate.isInitialized(one2oneCompChild)) {
            one2oneCompChild.setOne2oneCompParent(one2oneCompParent);
        }

        One2oneCompParent one2oneCompParentCreated = this.wmGenericDao.create(one2oneCompParent);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(one2oneCompParentCreated);
    }

    @Transactional(readOnly = true, value = "NewTestDBTransactionManager")
    @Override
    public One2oneCompParent getById(One2oneCompParentId one2onecompparentId) {
        LOGGER.debug("Finding One2oneCompParent by id: {}", one2onecompparentId);
        return this.wmGenericDao.findById(one2onecompparentId);
    }

    @Transactional(readOnly = true, value = "NewTestDBTransactionManager")
    @Override
    public One2oneCompParent findById(One2oneCompParentId one2onecompparentId) {
        LOGGER.debug("Finding One2oneCompParent by id: {}", one2onecompparentId);
        try {
            return this.wmGenericDao.findById(one2onecompparentId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No One2oneCompParent found with id: {}", one2onecompparentId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "NewTestDBTransactionManager")
    @Override
    public List<One2oneCompParent> findByMultipleIds(List<One2oneCompParentId> one2onecompparentIds, boolean orderedReturn) {
        LOGGER.debug("Finding One2oneCompParents by ids: {}", one2onecompparentIds);

        return this.wmGenericDao.findByMultipleIds(one2onecompparentIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "NewTestDBTransactionManager")
    @Override
    public One2oneCompParent update(One2oneCompParent one2oneCompParent) {
        LOGGER.debug("Updating One2oneCompParent with information: {}", one2oneCompParent);

        One2oneCompChild one2oneCompChild = one2oneCompParent.getOne2oneCompChild();
        if(one2oneCompChild != null && Hibernate.isInitialized(one2oneCompChild)) {
            one2oneCompChild.setOne2oneCompParent(one2oneCompParent);
        }

        this.wmGenericDao.update(one2oneCompParent);
        this.wmGenericDao.refresh(one2oneCompParent);

        return one2oneCompParent;
    }

    @Transactional(value = "NewTestDBTransactionManager")
    @Override
    public One2oneCompParent partialUpdate(One2oneCompParentId one2onecompparentId, Map<String, Object>one2oneCompParentPatch) {
        LOGGER.debug("Partially Updating the One2oneCompParent with id: {}", one2onecompparentId);

        One2oneCompParent one2oneCompParent = getById(one2onecompparentId);

        try {
            ObjectReader one2oneCompParentReader = this.objectMapper.reader().forType(One2oneCompParent.class).withValueToUpdate(one2oneCompParent);
            one2oneCompParent = one2oneCompParentReader.readValue(this.objectMapper.writeValueAsString(one2oneCompParentPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", one2oneCompParentPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        one2oneCompParent = update(one2oneCompParent);

        return one2oneCompParent;
    }

    @Transactional(value = "NewTestDBTransactionManager")
    @Override
    public One2oneCompParent delete(One2oneCompParentId one2onecompparentId) {
        LOGGER.debug("Deleting One2oneCompParent with id: {}", one2onecompparentId);
        One2oneCompParent deleted = this.wmGenericDao.findById(one2onecompparentId);
        if (deleted == null) {
            LOGGER.debug("No One2oneCompParent found with id: {}", one2onecompparentId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), One2oneCompParent.class.getSimpleName(), one2onecompparentId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "NewTestDBTransactionManager")
    @Override
    public void delete(One2oneCompParent one2oneCompParent) {
        LOGGER.debug("Deleting One2oneCompParent with {}", one2oneCompParent);
        this.wmGenericDao.delete(one2oneCompParent);
    }

    @Transactional(readOnly = true, value = "NewTestDBTransactionManager")
    @Override
    public Page<One2oneCompParent> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all One2oneCompParents");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "NewTestDBTransactionManager")
    @Override
    public Page<One2oneCompParent> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all One2oneCompParents");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "NewTestDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service NewTestDB for table One2oneCompParent to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "NewTestDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service NewTestDB for table One2oneCompParent to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "NewTestDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "NewTestDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}