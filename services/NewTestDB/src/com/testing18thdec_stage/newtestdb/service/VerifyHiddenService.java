/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing18thdec_stage.newtestdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing18thdec_stage.newtestdb.VerifyHidden;

/**
 * Service object for domain model class {@link VerifyHidden}.
 */
public interface VerifyHiddenService {

    /**
     * Creates a new VerifyHidden. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on VerifyHidden if any.
     *
     * @param verifyHidden Details of the VerifyHidden to be created; value cannot be null.
     * @return The newly created VerifyHidden.
     */
    VerifyHidden create(@Valid VerifyHidden verifyHidden);


	/**
     * Returns VerifyHidden by given id if exists.
     *
     * @param verifyhiddenId The id of the VerifyHidden to get; value cannot be null.
     * @return VerifyHidden associated with the given verifyhiddenId.
	 * @throws EntityNotFoundException If no VerifyHidden is found.
     */
    VerifyHidden getById(Integer verifyhiddenId);

    /**
     * Find and return the VerifyHidden by given id if exists, returns null otherwise.
     *
     * @param verifyhiddenId The id of the VerifyHidden to get; value cannot be null.
     * @return VerifyHidden associated with the given verifyhiddenId.
     */
    VerifyHidden findById(Integer verifyhiddenId);

	/**
     * Find and return the list of VerifyHiddens by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param verifyhiddenIds The id's of the VerifyHidden to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return VerifyHiddens associated with the given verifyhiddenIds.
     */
    List<VerifyHidden> findByMultipleIds(List<Integer> verifyhiddenIds, boolean orderedReturn);

    /**
     * Find and return the VerifyHidden for given intcol2dbdef  if exists.
     *
     * @param intcol2dbdef value of intcol2dbdef; value cannot be null.
     * @return VerifyHidden associated with the given inputs.
     * @throws EntityNotFoundException if no matching VerifyHidden found.
     */
    VerifyHidden getByIntcol2dbdef(Integer intcol2dbdef);

    /**
     * Updates the details of an existing VerifyHidden. It replaces all fields of the existing VerifyHidden with the given verifyHidden.
     *
     * This method overrides the input field values using Server side or database managed properties defined on VerifyHidden if any.
     *
     * @param verifyHidden The details of the VerifyHidden to be updated; value cannot be null.
     * @return The updated VerifyHidden.
     * @throws EntityNotFoundException if no VerifyHidden is found with given input.
     */
    VerifyHidden update(@Valid VerifyHidden verifyHidden);


    /**
     * Partially updates the details of an existing VerifyHidden. It updates only the
     * fields of the existing VerifyHidden which are passed in the verifyHiddenPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on VerifyHidden if any.
     *
     * @param verifyhiddenId The id of the VerifyHidden to be deleted; value cannot be null.
     * @param verifyHiddenPatch The partial data of VerifyHidden which is supposed to be updated; value cannot be null.
     * @return The updated VerifyHidden.
     * @throws EntityNotFoundException if no VerifyHidden is found with given input.
     */
    VerifyHidden partialUpdate(Integer verifyhiddenId, Map<String, Object> verifyHiddenPatch);

    /**
     * Deletes an existing VerifyHidden with the given id.
     *
     * @param verifyhiddenId The id of the VerifyHidden to be deleted; value cannot be null.
     * @return The deleted VerifyHidden.
     * @throws EntityNotFoundException if no VerifyHidden found with the given id.
     */
    VerifyHidden delete(Integer verifyhiddenId);

    /**
     * Deletes an existing VerifyHidden with the given object.
     *
     * @param verifyHidden The instance of the VerifyHidden to be deleted; value cannot be null.
     */
    void delete(VerifyHidden verifyHidden);

    /**
     * Find all VerifyHiddens matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching VerifyHiddens.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<VerifyHidden> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all VerifyHiddens matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching VerifyHiddens.
     *
     * @see Pageable
     * @see Page
     */
    Page<VerifyHidden> findAll(String query, Pageable pageable);

    /**
     * Exports all VerifyHiddens matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all VerifyHiddens matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the VerifyHiddens in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the VerifyHidden.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}