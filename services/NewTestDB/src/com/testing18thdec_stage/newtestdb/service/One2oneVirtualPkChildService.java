/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing18thdec_stage.newtestdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing18thdec_stage.newtestdb.One2oneVirtualPkChild;
import com.testing18thdec_stage.newtestdb.One2oneVirtualPkChildId;

/**
 * Service object for domain model class {@link One2oneVirtualPkChild}.
 */
public interface One2oneVirtualPkChildService {

    /**
     * Creates a new One2oneVirtualPkChild. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on One2oneVirtualPkChild if any.
     *
     * @param one2oneVirtualPkChild Details of the One2oneVirtualPkChild to be created; value cannot be null.
     * @return The newly created One2oneVirtualPkChild.
     */
    One2oneVirtualPkChild create(@Valid One2oneVirtualPkChild one2oneVirtualPkChild);


	/**
     * Returns One2oneVirtualPkChild by given id if exists.
     *
     * @param one2onevirtualpkchildId The id of the One2oneVirtualPkChild to get; value cannot be null.
     * @return One2oneVirtualPkChild associated with the given one2onevirtualpkchildId.
	 * @throws EntityNotFoundException If no One2oneVirtualPkChild is found.
     */
    One2oneVirtualPkChild getById(One2oneVirtualPkChildId one2onevirtualpkchildId);

    /**
     * Find and return the One2oneVirtualPkChild by given id if exists, returns null otherwise.
     *
     * @param one2onevirtualpkchildId The id of the One2oneVirtualPkChild to get; value cannot be null.
     * @return One2oneVirtualPkChild associated with the given one2onevirtualpkchildId.
     */
    One2oneVirtualPkChild findById(One2oneVirtualPkChildId one2onevirtualpkchildId);

	/**
     * Find and return the list of One2oneVirtualPkChilds by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param one2onevirtualpkchildIds The id's of the One2oneVirtualPkChild to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return One2oneVirtualPkChilds associated with the given one2onevirtualpkchildIds.
     */
    List<One2oneVirtualPkChild> findByMultipleIds(List<One2oneVirtualPkChildId> one2onevirtualpkchildIds, boolean orderedReturn);


    /**
     * Updates the details of an existing One2oneVirtualPkChild. It replaces all fields of the existing One2oneVirtualPkChild with the given one2oneVirtualPkChild.
     *
     * This method overrides the input field values using Server side or database managed properties defined on One2oneVirtualPkChild if any.
     *
     * @param one2oneVirtualPkChild The details of the One2oneVirtualPkChild to be updated; value cannot be null.
     * @return The updated One2oneVirtualPkChild.
     * @throws EntityNotFoundException if no One2oneVirtualPkChild is found with given input.
     */
    One2oneVirtualPkChild update(@Valid One2oneVirtualPkChild one2oneVirtualPkChild);


    /**
     * Partially updates the details of an existing One2oneVirtualPkChild. It updates only the
     * fields of the existing One2oneVirtualPkChild which are passed in the one2oneVirtualPkChildPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on One2oneVirtualPkChild if any.
     *
     * @param one2onevirtualpkchildId The id of the One2oneVirtualPkChild to be deleted; value cannot be null.
     * @param one2oneVirtualPkChildPatch The partial data of One2oneVirtualPkChild which is supposed to be updated; value cannot be null.
     * @return The updated One2oneVirtualPkChild.
     * @throws EntityNotFoundException if no One2oneVirtualPkChild is found with given input.
     */
    One2oneVirtualPkChild partialUpdate(One2oneVirtualPkChildId one2onevirtualpkchildId, Map<String, Object> one2oneVirtualPkChildPatch);

    /**
     * Deletes an existing One2oneVirtualPkChild with the given id.
     *
     * @param one2onevirtualpkchildId The id of the One2oneVirtualPkChild to be deleted; value cannot be null.
     * @return The deleted One2oneVirtualPkChild.
     * @throws EntityNotFoundException if no One2oneVirtualPkChild found with the given id.
     */
    One2oneVirtualPkChild delete(One2oneVirtualPkChildId one2onevirtualpkchildId);

    /**
     * Deletes an existing One2oneVirtualPkChild with the given object.
     *
     * @param one2oneVirtualPkChild The instance of the One2oneVirtualPkChild to be deleted; value cannot be null.
     */
    void delete(One2oneVirtualPkChild one2oneVirtualPkChild);

    /**
     * Find all One2oneVirtualPkChilds matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching One2oneVirtualPkChilds.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<One2oneVirtualPkChild> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all One2oneVirtualPkChilds matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching One2oneVirtualPkChilds.
     *
     * @see Pageable
     * @see Page
     */
    Page<One2oneVirtualPkChild> findAll(String query, Pageable pageable);

    /**
     * Exports all One2oneVirtualPkChilds matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all One2oneVirtualPkChilds matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the One2oneVirtualPkChilds in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the One2oneVirtualPkChild.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}