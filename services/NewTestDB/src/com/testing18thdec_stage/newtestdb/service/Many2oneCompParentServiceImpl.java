/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing18thdec_stage.newtestdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.math.BigDecimal;
import java.util.List;
import java.util.Map;

import org.hibernate.Hibernate;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing18thdec_stage.newtestdb.Many2oneCompChild;
import com.testing18thdec_stage.newtestdb.Many2oneCompParent;
import com.testing18thdec_stage.newtestdb.Many2oneCompParentId;


/**
 * ServiceImpl object for domain model class Many2oneCompParent.
 *
 * @see Many2oneCompParent
 */
@Service("NewTestDB.Many2oneCompParentService")
@Validated
@EntityService(entityClass = Many2oneCompParent.class, serviceId = "NewTestDB")
public class Many2oneCompParentServiceImpl implements Many2oneCompParentService {

    private static final Logger LOGGER = LoggerFactory.getLogger(Many2oneCompParentServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("NewTestDB.Many2oneCompChildService")
    private Many2oneCompChildService many2oneCompChildService;

    @Autowired
    @Qualifier("NewTestDB.Many2oneCompParentDao")
    private WMGenericDao<Many2oneCompParent, Many2oneCompParentId> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<Many2oneCompParent, Many2oneCompParentId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "NewTestDBTransactionManager")
    @Override
    public Many2oneCompParent create(Many2oneCompParent many2oneCompParent) {
        LOGGER.debug("Creating a new Many2oneCompParent with information: {}", many2oneCompParent);

        List<Many2oneCompChild> many2oneCompChilds = many2oneCompParent.getMany2oneCompChilds();
        if(many2oneCompChilds != null && Hibernate.isInitialized(many2oneCompChilds)) {
            many2oneCompChilds.forEach(_many2oneCompChild -> _many2oneCompChild.setMany2oneCompParent(many2oneCompParent));
        }

        Many2oneCompParent many2oneCompParentCreated = this.wmGenericDao.create(many2oneCompParent);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(many2oneCompParentCreated);
    }

    @Transactional(readOnly = true, value = "NewTestDBTransactionManager")
    @Override
    public Many2oneCompParent getById(Many2oneCompParentId many2onecompparentId) {
        LOGGER.debug("Finding Many2oneCompParent by id: {}", many2onecompparentId);
        return this.wmGenericDao.findById(many2onecompparentId);
    }

    @Transactional(readOnly = true, value = "NewTestDBTransactionManager")
    @Override
    public Many2oneCompParent findById(Many2oneCompParentId many2onecompparentId) {
        LOGGER.debug("Finding Many2oneCompParent by id: {}", many2onecompparentId);
        try {
            return this.wmGenericDao.findById(many2onecompparentId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Many2oneCompParent found with id: {}", many2onecompparentId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "NewTestDBTransactionManager")
    @Override
    public List<Many2oneCompParent> findByMultipleIds(List<Many2oneCompParentId> many2onecompparentIds, boolean orderedReturn) {
        LOGGER.debug("Finding Many2oneCompParents by ids: {}", many2onecompparentIds);

        return this.wmGenericDao.findByMultipleIds(many2onecompparentIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "NewTestDBTransactionManager")
    @Override
    public Many2oneCompParent update(Many2oneCompParent many2oneCompParent) {
        LOGGER.debug("Updating Many2oneCompParent with information: {}", many2oneCompParent);

        List<Many2oneCompChild> many2oneCompChilds = many2oneCompParent.getMany2oneCompChilds();
        if(many2oneCompChilds != null && Hibernate.isInitialized(many2oneCompChilds)) {
            many2oneCompChilds.forEach(_many2oneCompChild -> _many2oneCompChild.setMany2oneCompParent(many2oneCompParent));
        }

        this.wmGenericDao.update(many2oneCompParent);
        this.wmGenericDao.refresh(many2oneCompParent);

        return many2oneCompParent;
    }

    @Transactional(value = "NewTestDBTransactionManager")
    @Override
    public Many2oneCompParent partialUpdate(Many2oneCompParentId many2onecompparentId, Map<String, Object>many2oneCompParentPatch) {
        LOGGER.debug("Partially Updating the Many2oneCompParent with id: {}", many2onecompparentId);

        Many2oneCompParent many2oneCompParent = getById(many2onecompparentId);

        try {
            ObjectReader many2oneCompParentReader = this.objectMapper.reader().forType(Many2oneCompParent.class).withValueToUpdate(many2oneCompParent);
            many2oneCompParent = many2oneCompParentReader.readValue(this.objectMapper.writeValueAsString(many2oneCompParentPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", many2oneCompParentPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        many2oneCompParent = update(many2oneCompParent);

        return many2oneCompParent;
    }

    @Transactional(value = "NewTestDBTransactionManager")
    @Override
    public Many2oneCompParent delete(Many2oneCompParentId many2onecompparentId) {
        LOGGER.debug("Deleting Many2oneCompParent with id: {}", many2onecompparentId);
        Many2oneCompParent deleted = this.wmGenericDao.findById(many2onecompparentId);
        if (deleted == null) {
            LOGGER.debug("No Many2oneCompParent found with id: {}", many2onecompparentId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Many2oneCompParent.class.getSimpleName(), many2onecompparentId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "NewTestDBTransactionManager")
    @Override
    public void delete(Many2oneCompParent many2oneCompParent) {
        LOGGER.debug("Deleting Many2oneCompParent with {}", many2oneCompParent);
        this.wmGenericDao.delete(many2oneCompParent);
    }

    @Transactional(readOnly = true, value = "NewTestDBTransactionManager")
    @Override
    public Page<Many2oneCompParent> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Many2oneCompParents");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "NewTestDBTransactionManager")
    @Override
    public Page<Many2oneCompParent> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Many2oneCompParents");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "NewTestDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service NewTestDB for table Many2oneCompParent to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "NewTestDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service NewTestDB for table Many2oneCompParent to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "NewTestDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "NewTestDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "NewTestDBTransactionManager")
    @Override
    public Page<Many2oneCompChild> findAssociatedMany2oneCompChilds(String stringId, Double floatId, BigDecimal doubleCol, String charId, Pageable pageable) {
        LOGGER.debug("Fetching all associated many2oneCompChilds");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("many2oneCompParent.stringId = '" + stringId + "'");
        queryBuilder.append(" and ");
        queryBuilder.append("many2oneCompParent.floatId = '" + floatId + "'");
        queryBuilder.append(" and ");
        queryBuilder.append("many2oneCompParent.doubleCol = '" + doubleCol + "'");
        queryBuilder.append(" and ");
        queryBuilder.append("many2oneCompParent.charId = '" + charId + "'");

        return many2oneCompChildService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service Many2oneCompChildService instance
     */
    protected void setMany2oneCompChildService(Many2oneCompChildService service) {
        this.many2oneCompChildService = service;
    }

}