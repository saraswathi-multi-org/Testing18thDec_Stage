/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing18thdec_stage.newtestdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing18thdec_stage.newtestdb.VerifyHidden;


/**
 * ServiceImpl object for domain model class VerifyHidden.
 *
 * @see VerifyHidden
 */
@Service("NewTestDB.VerifyHiddenService")
@Validated
@EntityService(entityClass = VerifyHidden.class, serviceId = "NewTestDB")
public class VerifyHiddenServiceImpl implements VerifyHiddenService {

    private static final Logger LOGGER = LoggerFactory.getLogger(VerifyHiddenServiceImpl.class);


    @Autowired
    @Qualifier("NewTestDB.VerifyHiddenDao")
    private WMGenericDao<VerifyHidden, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<VerifyHidden, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "NewTestDBTransactionManager")
    @Override
    public VerifyHidden create(VerifyHidden verifyHidden) {
        LOGGER.debug("Creating a new VerifyHidden with information: {}", verifyHidden);

        VerifyHidden verifyHiddenCreated = this.wmGenericDao.create(verifyHidden);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(verifyHiddenCreated);
    }

    @Transactional(readOnly = true, value = "NewTestDBTransactionManager")
    @Override
    public VerifyHidden getById(Integer verifyhiddenId) {
        LOGGER.debug("Finding VerifyHidden by id: {}", verifyhiddenId);
        return this.wmGenericDao.findById(verifyhiddenId);
    }

    @Transactional(readOnly = true, value = "NewTestDBTransactionManager")
    @Override
    public VerifyHidden findById(Integer verifyhiddenId) {
        LOGGER.debug("Finding VerifyHidden by id: {}", verifyhiddenId);
        try {
            return this.wmGenericDao.findById(verifyhiddenId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No VerifyHidden found with id: {}", verifyhiddenId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "NewTestDBTransactionManager")
    @Override
    public List<VerifyHidden> findByMultipleIds(List<Integer> verifyhiddenIds, boolean orderedReturn) {
        LOGGER.debug("Finding VerifyHiddens by ids: {}", verifyhiddenIds);

        return this.wmGenericDao.findByMultipleIds(verifyhiddenIds, orderedReturn);
    }

    @Transactional(readOnly = true, value = "NewTestDBTransactionManager")
    @Override
    public VerifyHidden getByIntcol2dbdef(Integer intcol2dbdef) {
        Map<String, Object> intcol2dbdefMap = new HashMap<>();
        intcol2dbdefMap.put("intcol2dbdef", intcol2dbdef);

        LOGGER.debug("Finding VerifyHidden by unique keys: {}", intcol2dbdefMap);
        return this.wmGenericDao.findByUniqueKey(intcol2dbdefMap);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "NewTestDBTransactionManager")
    @Override
    public VerifyHidden update(VerifyHidden verifyHidden) {
        LOGGER.debug("Updating VerifyHidden with information: {}", verifyHidden);

        this.wmGenericDao.update(verifyHidden);
        this.wmGenericDao.refresh(verifyHidden);

        return verifyHidden;
    }

    @Transactional(value = "NewTestDBTransactionManager")
    @Override
    public VerifyHidden partialUpdate(Integer verifyhiddenId, Map<String, Object>verifyHiddenPatch) {
        LOGGER.debug("Partially Updating the VerifyHidden with id: {}", verifyhiddenId);

        VerifyHidden verifyHidden = getById(verifyhiddenId);

        try {
            ObjectReader verifyHiddenReader = this.objectMapper.reader().forType(VerifyHidden.class).withValueToUpdate(verifyHidden);
            verifyHidden = verifyHiddenReader.readValue(this.objectMapper.writeValueAsString(verifyHiddenPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", verifyHiddenPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        verifyHidden = update(verifyHidden);

        return verifyHidden;
    }

    @Transactional(value = "NewTestDBTransactionManager")
    @Override
    public VerifyHidden delete(Integer verifyhiddenId) {
        LOGGER.debug("Deleting VerifyHidden with id: {}", verifyhiddenId);
        VerifyHidden deleted = this.wmGenericDao.findById(verifyhiddenId);
        if (deleted == null) {
            LOGGER.debug("No VerifyHidden found with id: {}", verifyhiddenId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), VerifyHidden.class.getSimpleName(), verifyhiddenId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "NewTestDBTransactionManager")
    @Override
    public void delete(VerifyHidden verifyHidden) {
        LOGGER.debug("Deleting VerifyHidden with {}", verifyHidden);
        this.wmGenericDao.delete(verifyHidden);
    }

    @Transactional(readOnly = true, value = "NewTestDBTransactionManager")
    @Override
    public Page<VerifyHidden> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all VerifyHiddens");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "NewTestDBTransactionManager")
    @Override
    public Page<VerifyHidden> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all VerifyHiddens");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "NewTestDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service NewTestDB for table VerifyHidden to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "NewTestDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service NewTestDB for table VerifyHidden to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "NewTestDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "NewTestDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}