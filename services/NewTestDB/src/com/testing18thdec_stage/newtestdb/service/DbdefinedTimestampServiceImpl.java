/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing18thdec_stage.newtestdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing18thdec_stage.newtestdb.DbdefinedTimestamp;
import com.testing18thdec_stage.newtestdb.DbdefinedTimestampId;


/**
 * ServiceImpl object for domain model class DbdefinedTimestamp.
 *
 * @see DbdefinedTimestamp
 */
@Service("NewTestDB.DbdefinedTimestampService")
@Validated
@EntityService(entityClass = DbdefinedTimestamp.class, serviceId = "NewTestDB")
public class DbdefinedTimestampServiceImpl implements DbdefinedTimestampService {

    private static final Logger LOGGER = LoggerFactory.getLogger(DbdefinedTimestampServiceImpl.class);


    @Autowired
    @Qualifier("NewTestDB.DbdefinedTimestampDao")
    private WMGenericDao<DbdefinedTimestamp, DbdefinedTimestampId> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<DbdefinedTimestamp, DbdefinedTimestampId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "NewTestDBTransactionManager")
    @Override
    public DbdefinedTimestamp create(DbdefinedTimestamp dbdefinedTimestamp) {
        LOGGER.debug("Creating a new DbdefinedTimestamp with information: {}", dbdefinedTimestamp);

        DbdefinedTimestamp dbdefinedTimestampCreated = this.wmGenericDao.create(dbdefinedTimestamp);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(dbdefinedTimestampCreated);
    }

    @Transactional(readOnly = true, value = "NewTestDBTransactionManager")
    @Override
    public DbdefinedTimestamp getById(DbdefinedTimestampId dbdefinedtimestampId) {
        LOGGER.debug("Finding DbdefinedTimestamp by id: {}", dbdefinedtimestampId);
        return this.wmGenericDao.findById(dbdefinedtimestampId);
    }

    @Transactional(readOnly = true, value = "NewTestDBTransactionManager")
    @Override
    public DbdefinedTimestamp findById(DbdefinedTimestampId dbdefinedtimestampId) {
        LOGGER.debug("Finding DbdefinedTimestamp by id: {}", dbdefinedtimestampId);
        try {
            return this.wmGenericDao.findById(dbdefinedtimestampId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No DbdefinedTimestamp found with id: {}", dbdefinedtimestampId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "NewTestDBTransactionManager")
    @Override
    public List<DbdefinedTimestamp> findByMultipleIds(List<DbdefinedTimestampId> dbdefinedtimestampIds, boolean orderedReturn) {
        LOGGER.debug("Finding DbdefinedTimestamps by ids: {}", dbdefinedtimestampIds);

        return this.wmGenericDao.findByMultipleIds(dbdefinedtimestampIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "NewTestDBTransactionManager")
    @Override
    public DbdefinedTimestamp update(DbdefinedTimestamp dbdefinedTimestamp) {
        LOGGER.debug("Updating DbdefinedTimestamp with information: {}", dbdefinedTimestamp);

        this.wmGenericDao.update(dbdefinedTimestamp);
        this.wmGenericDao.refresh(dbdefinedTimestamp);

        return dbdefinedTimestamp;
    }

    @Transactional(value = "NewTestDBTransactionManager")
    @Override
    public DbdefinedTimestamp partialUpdate(DbdefinedTimestampId dbdefinedtimestampId, Map<String, Object>dbdefinedTimestampPatch) {
        LOGGER.debug("Partially Updating the DbdefinedTimestamp with id: {}", dbdefinedtimestampId);

        DbdefinedTimestamp dbdefinedTimestamp = getById(dbdefinedtimestampId);

        try {
            ObjectReader dbdefinedTimestampReader = this.objectMapper.reader().forType(DbdefinedTimestamp.class).withValueToUpdate(dbdefinedTimestamp);
            dbdefinedTimestamp = dbdefinedTimestampReader.readValue(this.objectMapper.writeValueAsString(dbdefinedTimestampPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", dbdefinedTimestampPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        dbdefinedTimestamp = update(dbdefinedTimestamp);

        return dbdefinedTimestamp;
    }

    @Transactional(value = "NewTestDBTransactionManager")
    @Override
    public DbdefinedTimestamp delete(DbdefinedTimestampId dbdefinedtimestampId) {
        LOGGER.debug("Deleting DbdefinedTimestamp with id: {}", dbdefinedtimestampId);
        DbdefinedTimestamp deleted = this.wmGenericDao.findById(dbdefinedtimestampId);
        if (deleted == null) {
            LOGGER.debug("No DbdefinedTimestamp found with id: {}", dbdefinedtimestampId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), DbdefinedTimestamp.class.getSimpleName(), dbdefinedtimestampId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "NewTestDBTransactionManager")
    @Override
    public void delete(DbdefinedTimestamp dbdefinedTimestamp) {
        LOGGER.debug("Deleting DbdefinedTimestamp with {}", dbdefinedTimestamp);
        this.wmGenericDao.delete(dbdefinedTimestamp);
    }

    @Transactional(readOnly = true, value = "NewTestDBTransactionManager")
    @Override
    public Page<DbdefinedTimestamp> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all DbdefinedTimestamps");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "NewTestDBTransactionManager")
    @Override
    public Page<DbdefinedTimestamp> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all DbdefinedTimestamps");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "NewTestDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service NewTestDB for table DbdefinedTimestamp to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "NewTestDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service NewTestDB for table DbdefinedTimestamp to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "NewTestDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "NewTestDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}