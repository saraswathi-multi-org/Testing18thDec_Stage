/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing18thdec_stage.newtestdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing18thdec_stage.newtestdb.One2oneChild;
import com.testing18thdec_stage.newtestdb.One2oneParent;


/**
 * ServiceImpl object for domain model class One2oneChild.
 *
 * @see One2oneChild
 */
@Service("NewTestDB.One2oneChildService")
@Validated
@EntityService(entityClass = One2oneChild.class, serviceId = "NewTestDB")
public class One2oneChildServiceImpl implements One2oneChildService {

    private static final Logger LOGGER = LoggerFactory.getLogger(One2oneChildServiceImpl.class);


    @Autowired
    @Qualifier("NewTestDB.One2oneChildDao")
    private WMGenericDao<One2oneChild, Short> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<One2oneChild, Short> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "NewTestDBTransactionManager")
    @Override
    public One2oneChild create(One2oneChild one2oneChild) {
        LOGGER.debug("Creating a new One2oneChild with information: {}", one2oneChild);

        One2oneChild one2oneChildCreated = this.wmGenericDao.create(one2oneChild);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(one2oneChildCreated);
    }

    @Transactional(readOnly = true, value = "NewTestDBTransactionManager")
    @Override
    public One2oneChild getById(Short one2onechildId) {
        LOGGER.debug("Finding One2oneChild by id: {}", one2onechildId);
        return this.wmGenericDao.findById(one2onechildId);
    }

    @Transactional(readOnly = true, value = "NewTestDBTransactionManager")
    @Override
    public One2oneChild findById(Short one2onechildId) {
        LOGGER.debug("Finding One2oneChild by id: {}", one2onechildId);
        try {
            return this.wmGenericDao.findById(one2onechildId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No One2oneChild found with id: {}", one2onechildId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "NewTestDBTransactionManager")
    @Override
    public List<One2oneChild> findByMultipleIds(List<Short> one2onechildIds, boolean orderedReturn) {
        LOGGER.debug("Finding One2oneChilds by ids: {}", one2onechildIds);

        return this.wmGenericDao.findByMultipleIds(one2onechildIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "NewTestDBTransactionManager")
    @Override
    public One2oneChild update(One2oneChild one2oneChild) {
        LOGGER.debug("Updating One2oneChild with information: {}", one2oneChild);

        this.wmGenericDao.update(one2oneChild);
        this.wmGenericDao.refresh(one2oneChild);

        return one2oneChild;
    }

    @Transactional(value = "NewTestDBTransactionManager")
    @Override
    public One2oneChild partialUpdate(Short one2onechildId, Map<String, Object>one2oneChildPatch) {
        LOGGER.debug("Partially Updating the One2oneChild with id: {}", one2onechildId);

        One2oneChild one2oneChild = getById(one2onechildId);

        try {
            ObjectReader one2oneChildReader = this.objectMapper.reader().forType(One2oneChild.class).withValueToUpdate(one2oneChild);
            one2oneChild = one2oneChildReader.readValue(this.objectMapper.writeValueAsString(one2oneChildPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", one2oneChildPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        one2oneChild = update(one2oneChild);

        return one2oneChild;
    }

    @Transactional(value = "NewTestDBTransactionManager")
    @Override
    public One2oneChild delete(Short one2onechildId) {
        LOGGER.debug("Deleting One2oneChild with id: {}", one2onechildId);
        One2oneChild deleted = this.wmGenericDao.findById(one2onechildId);
        if (deleted == null) {
            LOGGER.debug("No One2oneChild found with id: {}", one2onechildId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), One2oneChild.class.getSimpleName(), one2onechildId);
        }
        // Removing references from parent Entities
        One2oneParent one2oneParentEntity = deleted.getOne2oneParent();
        if(one2oneParentEntity!=null) {
            one2oneParentEntity.setOne2oneChild(null);
        }

        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "NewTestDBTransactionManager")
    @Override
    public void delete(One2oneChild one2oneChild) {
        LOGGER.debug("Deleting One2oneChild with {}", one2oneChild);
        this.wmGenericDao.delete(one2oneChild);
    }

    @Transactional(readOnly = true, value = "NewTestDBTransactionManager")
    @Override
    public Page<One2oneChild> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all One2oneChilds");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "NewTestDBTransactionManager")
    @Override
    public Page<One2oneChild> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all One2oneChilds");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "NewTestDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service NewTestDB for table One2oneChild to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "NewTestDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service NewTestDB for table One2oneChild to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "NewTestDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "NewTestDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}