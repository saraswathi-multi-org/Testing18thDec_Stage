/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing18thdec_stage.newtestdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing18thdec_stage.newtestdb.Many2oneCompChild1;
import com.testing18thdec_stage.newtestdb.Many2oneCompChild1Id;


/**
 * ServiceImpl object for domain model class Many2oneCompChild1.
 *
 * @see Many2oneCompChild1
 */
@Service("NewTestDB.Many2oneCompChild1Service")
@Validated
@EntityService(entityClass = Many2oneCompChild1.class, serviceId = "NewTestDB")
public class Many2oneCompChild1ServiceImpl implements Many2oneCompChild1Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Many2oneCompChild1ServiceImpl.class);


    @Autowired
    @Qualifier("NewTestDB.Many2oneCompChild1Dao")
    private WMGenericDao<Many2oneCompChild1, Many2oneCompChild1Id> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<Many2oneCompChild1, Many2oneCompChild1Id> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "NewTestDBTransactionManager")
    @Override
    public Many2oneCompChild1 create(Many2oneCompChild1 many2oneCompChild1) {
        LOGGER.debug("Creating a new Many2oneCompChild1 with information: {}", many2oneCompChild1);

        Many2oneCompChild1 many2oneCompChild1Created = this.wmGenericDao.create(many2oneCompChild1);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(many2oneCompChild1Created);
    }

    @Transactional(readOnly = true, value = "NewTestDBTransactionManager")
    @Override
    public Many2oneCompChild1 getById(Many2oneCompChild1Id many2onecompchild1Id) {
        LOGGER.debug("Finding Many2oneCompChild1 by id: {}", many2onecompchild1Id);
        return this.wmGenericDao.findById(many2onecompchild1Id);
    }

    @Transactional(readOnly = true, value = "NewTestDBTransactionManager")
    @Override
    public Many2oneCompChild1 findById(Many2oneCompChild1Id many2onecompchild1Id) {
        LOGGER.debug("Finding Many2oneCompChild1 by id: {}", many2onecompchild1Id);
        try {
            return this.wmGenericDao.findById(many2onecompchild1Id);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Many2oneCompChild1 found with id: {}", many2onecompchild1Id, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "NewTestDBTransactionManager")
    @Override
    public List<Many2oneCompChild1> findByMultipleIds(List<Many2oneCompChild1Id> many2onecompchild1Ids, boolean orderedReturn) {
        LOGGER.debug("Finding Many2oneCompChild1s by ids: {}", many2onecompchild1Ids);

        return this.wmGenericDao.findByMultipleIds(many2onecompchild1Ids, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "NewTestDBTransactionManager")
    @Override
    public Many2oneCompChild1 update(Many2oneCompChild1 many2oneCompChild1) {
        LOGGER.debug("Updating Many2oneCompChild1 with information: {}", many2oneCompChild1);

        this.wmGenericDao.update(many2oneCompChild1);
        this.wmGenericDao.refresh(many2oneCompChild1);

        return many2oneCompChild1;
    }

    @Transactional(value = "NewTestDBTransactionManager")
    @Override
    public Many2oneCompChild1 partialUpdate(Many2oneCompChild1Id many2onecompchild1Id, Map<String, Object>many2oneCompChild1Patch) {
        LOGGER.debug("Partially Updating the Many2oneCompChild1 with id: {}", many2onecompchild1Id);

        Many2oneCompChild1 many2oneCompChild1 = getById(many2onecompchild1Id);

        try {
            ObjectReader many2oneCompChild1Reader = this.objectMapper.reader().forType(Many2oneCompChild1.class).withValueToUpdate(many2oneCompChild1);
            many2oneCompChild1 = many2oneCompChild1Reader.readValue(this.objectMapper.writeValueAsString(many2oneCompChild1Patch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", many2oneCompChild1Patch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        many2oneCompChild1 = update(many2oneCompChild1);

        return many2oneCompChild1;
    }

    @Transactional(value = "NewTestDBTransactionManager")
    @Override
    public Many2oneCompChild1 delete(Many2oneCompChild1Id many2onecompchild1Id) {
        LOGGER.debug("Deleting Many2oneCompChild1 with id: {}", many2onecompchild1Id);
        Many2oneCompChild1 deleted = this.wmGenericDao.findById(many2onecompchild1Id);
        if (deleted == null) {
            LOGGER.debug("No Many2oneCompChild1 found with id: {}", many2onecompchild1Id);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Many2oneCompChild1.class.getSimpleName(), many2onecompchild1Id);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "NewTestDBTransactionManager")
    @Override
    public void delete(Many2oneCompChild1 many2oneCompChild1) {
        LOGGER.debug("Deleting Many2oneCompChild1 with {}", many2oneCompChild1);
        this.wmGenericDao.delete(many2oneCompChild1);
    }

    @Transactional(readOnly = true, value = "NewTestDBTransactionManager")
    @Override
    public Page<Many2oneCompChild1> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Many2oneCompChild1s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "NewTestDBTransactionManager")
    @Override
    public Page<Many2oneCompChild1> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Many2oneCompChild1s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "NewTestDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service NewTestDB for table Many2oneCompChild1 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "NewTestDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service NewTestDB for table Many2oneCompChild1 to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "NewTestDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "NewTestDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}