/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing18thdec_stage.newtestdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing18thdec_stage.newtestdb.Many2oneChild;

/**
 * Service object for domain model class {@link Many2oneChild}.
 */
public interface Many2oneChildService {

    /**
     * Creates a new Many2oneChild. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Many2oneChild if any.
     *
     * @param many2oneChild Details of the Many2oneChild to be created; value cannot be null.
     * @return The newly created Many2oneChild.
     */
    Many2oneChild create(@Valid Many2oneChild many2oneChild);


	/**
     * Returns Many2oneChild by given id if exists.
     *
     * @param many2onechildId The id of the Many2oneChild to get; value cannot be null.
     * @return Many2oneChild associated with the given many2onechildId.
	 * @throws EntityNotFoundException If no Many2oneChild is found.
     */
    Many2oneChild getById(Integer many2onechildId);

    /**
     * Find and return the Many2oneChild by given id if exists, returns null otherwise.
     *
     * @param many2onechildId The id of the Many2oneChild to get; value cannot be null.
     * @return Many2oneChild associated with the given many2onechildId.
     */
    Many2oneChild findById(Integer many2onechildId);

	/**
     * Find and return the list of Many2oneChilds by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param many2onechildIds The id's of the Many2oneChild to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Many2oneChilds associated with the given many2onechildIds.
     */
    List<Many2oneChild> findByMultipleIds(List<Integer> many2onechildIds, boolean orderedReturn);


    /**
     * Updates the details of an existing Many2oneChild. It replaces all fields of the existing Many2oneChild with the given many2oneChild.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Many2oneChild if any.
     *
     * @param many2oneChild The details of the Many2oneChild to be updated; value cannot be null.
     * @return The updated Many2oneChild.
     * @throws EntityNotFoundException if no Many2oneChild is found with given input.
     */
    Many2oneChild update(@Valid Many2oneChild many2oneChild);


    /**
     * Partially updates the details of an existing Many2oneChild. It updates only the
     * fields of the existing Many2oneChild which are passed in the many2oneChildPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Many2oneChild if any.
     *
     * @param many2onechildId The id of the Many2oneChild to be deleted; value cannot be null.
     * @param many2oneChildPatch The partial data of Many2oneChild which is supposed to be updated; value cannot be null.
     * @return The updated Many2oneChild.
     * @throws EntityNotFoundException if no Many2oneChild is found with given input.
     */
    Many2oneChild partialUpdate(Integer many2onechildId, Map<String, Object> many2oneChildPatch);

    /**
     * Deletes an existing Many2oneChild with the given id.
     *
     * @param many2onechildId The id of the Many2oneChild to be deleted; value cannot be null.
     * @return The deleted Many2oneChild.
     * @throws EntityNotFoundException if no Many2oneChild found with the given id.
     */
    Many2oneChild delete(Integer many2onechildId);

    /**
     * Deletes an existing Many2oneChild with the given object.
     *
     * @param many2oneChild The instance of the Many2oneChild to be deleted; value cannot be null.
     */
    void delete(Many2oneChild many2oneChild);

    /**
     * Find all Many2oneChilds matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Many2oneChilds.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Many2oneChild> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Many2oneChilds matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Many2oneChilds.
     *
     * @see Pageable
     * @see Page
     */
    Page<Many2oneChild> findAll(String query, Pageable pageable);

    /**
     * Exports all Many2oneChilds matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Many2oneChilds matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Many2oneChilds in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Many2oneChild.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}